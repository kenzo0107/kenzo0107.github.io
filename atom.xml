<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>長生村本郷Engineers&#39;Blog</title>
  
  <subtitle>千葉県長生村本郷育ちのエンジニアが書いているブログ</subtitle>
  <link href="https://kenzo0107.github.io/atom.xml" rel="self"/>
  
  <link href="https://kenzo0107.github.io/"/>
  <updated>2023-04-20T15:00:00.000Z</updated>
  <id>https://kenzo0107.github.io/</id>
  
  <author>
    <name>Kenzo Tanaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>alpine イメージに awscli をインストールする</title>
    <link href="https://kenzo0107.github.io/2023/04/20/2023-04-21-install-awscli-on-alpine/"/>
    <id>https://kenzo0107.github.io/2023/04/20/2023-04-21-install-awscli-on-alpine/</id>
    <published>2023-04-20T15:00:00.000Z</published>
    <updated>2023-04-20T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><!-- tocstop --></div></div><hr><p>alpine イメージで awscli をインストールする際の備忘録です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RUN apk add --no-cache \</span><br><span class="line">        python3 \</span><br><span class="line">        py3-pip \</span><br><span class="line">    &amp;&amp; pip3 install --upgrade pip \</span><br><span class="line">    &amp;&amp; pip3 install --no-cache-dir \</span><br><span class="line">        awscli \</span><br><span class="line">    &amp;&amp; rm -rf /var/cache/apk/*</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;



&lt;!-- tocstop --&gt;

&lt;/div&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Raspberry Pi に USB スピーカーを接続しテキストを音声変換しお話しさせる</title>
    <link href="https://kenzo0107.github.io/2023/04/20/2023-05-18-raspberrypi4b-speaks-via-usb-speaker/"/>
    <id>https://kenzo0107.github.io/2023/04/20/2023-05-18-raspberrypi4b-speaks-via-usb-speaker/</id>
    <published>2023-04-20T15:00:00.000Z</published>
    <updated>2023-04-20T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E7%92%B0%E5%A2%83">環境</a></li><li><a href="#usb-%E3%82%B9%E3%83%94%E3%83%BC%E3%82%AB%E3%83%BC%E6%8E%A5%E7%B6%9A">usb スピーカー接続</a><ul><li><a href="#%E6%8E%A5%E7%B6%9A%E5%85%88%E3%81%AE-usb-%E3%82%B9%E3%83%94%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AE%E3%82%AB%E3%83%BC%E3%83%89%E7%95%AA%E5%8F%B7%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E7%95%AA%E5%8F%B7%E3%82%92%E7%A2%BA%E8%AA%8D">接続先の USB スピーカーのカード番号・デバイス番号を確認</a></li><li><a href="#%E9%9F%B3%E3%81%8C%E3%82%B9%E3%83%94%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%8B%E3%82%89%E8%81%9E%E3%81%93%E3%81%88%E3%82%8B%E3%81%8B%E3%83%86%E3%82%B9%E3%83%88">音がスピーカーから聞こえるかテスト</a></li></ul></li><li><a href="#python-%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%8B%E3%82%89%E5%86%8D%E7%94%9F%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B">python スクリプトから再生してみる</a></li><li><a href="#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%8B%E3%82%89%E9%9F%B3%E5%A3%B0%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E8%AA%AD%E3%81%BF%E4%B8%8A%E3%81%92%E3%82%8B">テキストから音声ファイルを作成し読み上げる</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>Raspberry Pi と OpenAI を通じて英会話しよう！という動機から<br>最初の一歩として USB スピーカーから指定したテキストを読み上げる様にしてみました。</p><h2><span id="環境">環境</span></h2><p><a href="https://www.amazon.co.jp/gp/product/B09FHGX1QQ/?&_encoding=UTF8&tag=kenzo0107-22&linkCode=ur2&linkId=82485e7160979d4bd9f1971203c46c58&camp=247&creative=1211">Marstudy Raspberry Pi 4 Model B Starter キット</a> で<br>プリインストールされた Raspbian OS を利用しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/os-release</span><br><span class="line"></span><br><span class="line">PRETTY_NAME=&quot;Raspbian GNU/Linux 10 (buster)&quot;</span><br><span class="line">NAME=&quot;Raspbian GNU/Linux&quot;</span><br><span class="line">VERSION_ID=&quot;10&quot;</span><br><span class="line">VERSION=&quot;10 (buster)&quot;</span><br><span class="line">VERSION_CODENAME=buster</span><br><span class="line">ID=raspbian</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">HOME_URL=&quot;http://www.raspbian.org/&quot;</span><br><span class="line">SUPPORT_URL=&quot;http://www.raspbian.org/RaspbianForums&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://www.raspbian.org/RaspbianBugs&quot;</span><br></pre></td></tr></table></figure><h2><span id="usb-スピーカー接続">usb スピーカー接続</span></h2><p><a href="https://www.amazon.co.jp/gp/product/B071699KYN/?&_encoding=UTF8&tag=kenzo0107-22&linkCode=ur2&linkId=79fbe724887de803e45a5601f5548940&camp=247&creative=1211">サンワサプライ コンパクト PC スピーカー MS-P08UBK</a> を利用します。</p><p>自分が購入した 2023-05-10 は ¥857 でした。</p><h3><span id="接続先の-usb-スピーカーのカード番号デバイス番号を確認">接続先の USB スピーカーのカード番号・デバイス番号を確認</span></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">aplay -l</span></span><br><span class="line">**** ハードウェアデバイス PLAYBACK のリスト ****</span><br><span class="line">カード 1: Headphones [bcm2835 Headphones], デバイス 0: bcm2835 Headphones [bcm2835 Headphones]</span><br><span class="line">  サブデバイス: 8/8</span><br><span class="line">  サブデバイス #0: subdevice #0</span><br><span class="line">  サブデバイス #1: subdevice #1</span><br><span class="line">  サブデバイス #2: subdevice #2</span><br><span class="line">  サブデバイス #3: subdevice #3</span><br><span class="line">  サブデバイス #4: subdevice #4</span><br><span class="line">  サブデバイス #5: subdevice #5</span><br><span class="line">  サブデバイス #6: subdevice #6</span><br><span class="line">  サブデバイス #7: subdevice #7</span><br></pre></td></tr></table></figure><ul><li>カード番号 = 1</li><li>デバイス番号 = 0</li></ul><h3><span id="音がスピーカーから聞こえるかテスト">音がスピーカーから聞こえるかテスト</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// plughw:&lt;カード&gt;,&lt;デバイス&gt;</span><br><span class="line">$ speaker-test -D plughw:1,0 -t wav</span><br><span class="line"></span><br><span class="line">// Ctrl+c で中断し終了します</span><br></pre></td></tr></table></figure><h2><span id="python-スクリプトから再生してみる">python スクリプトから再生してみる</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 install pygame</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl https://www.soundjay.com/buttons/button-3.mp3 -o button.mp3</span></span><br></pre></td></tr></table></figure><ul><li>play_sound.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_sound_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    pygame.mixer.init()</span><br><span class="line">    pygame.mixer.music.load(file_path)</span><br><span class="line">    pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pygame.mixer.music.get_busy() == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    play_sound_file(<span class="string">&#x27;button.mp3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以下実行し mp3 が再生されることが確認できます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 play_sound.py</span></span><br></pre></td></tr></table></figure><h2><span id="テキストから音声ファイルを作成し読み上げる">テキストから音声ファイルを作成し読み上げる</span></h2><ul><li>speech.py</li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 install gTTS</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip3 install pydub</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gtts <span class="keyword">import</span> gTTS</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">from</span> pydub.playback <span class="keyword">import</span> play</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speechja</span>(<span class="params">stext</span>):</span><br><span class="line">    tts = gTTS(stext, lang=<span class="string">&quot;ja&quot;</span>)</span><br><span class="line">    tts.save(<span class="string">&quot;/tmp/out.mp3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sound = AudioSegment.from_mp3(<span class="string">&quot;/tmp/out.mp3&quot;</span>)</span><br><span class="line">    play(sound)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    msg = <span class="string">&quot;はい、お元気ですか？&quot;</span></span><br><span class="line">    speechja(msg)</span><br></pre></td></tr></table></figure><p>以下実行しスピーカーから「はい、お元気ですか？」と再生されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 speech.py</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p><p>次回はマイクから音声認識させる設定を執筆したいと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%8</summary>
      
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>fix: curl: (48) An unknown option was passed in to libcurl</title>
    <link href="https://kenzo0107.github.io/2023/04/13/2023-04-14-curl-not-match-libcurl-on-alpine/"/>
    <id>https://kenzo0107.github.io/2023/04/13/2023-04-14-curl-not-match-libcurl-on-alpine/</id>
    <published>2023-04-13T15:00:00.000Z</published>
    <updated>2023-04-13T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#dockerfile">Dockerfile</a></li></ul><!-- tocstop --></div></div><hr><p>alpine イメージをベースで <code>RUN curl</code> が失敗し以下エラーが出力されました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (48) An unknown option was passed in to libcurl</span><br></pre></td></tr></table></figure><span id="more"></span><p>curl と libcurl のバージョンの不一致が原因で<br>curl-dev をインストールすることで解決しました。</p><p>参考: <a href="https://stackoverflow.com/questions/11678085/curl-48-an-unknown-option-was-passed-in-to-libcurl/41651363#41651363">https://stackoverflow.com/questions/11678085/curl-48-an-unknown-option-was-passed-in-to-libcurl/41651363#41651363</a></p><h3><span id="dockerfile">Dockerfile</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line"># 以下追加した</span><br><span class="line">RUN apk add --update --no-cache curl-dev</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;alpine イメージをベースで &lt;code&gt;RUN curl&lt;/code&gt; が失敗し以下エラーが出力されました。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl: (48) An unknown option was passed in to libcurl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>S3 のパブリックアクセスブロック有効後、無効にした際の S3 Object の ACL の挙動</title>
    <link href="https://kenzo0107.github.io/2023/04/04/2023-04-05-s3-bucket-public-access-block/"/>
    <id>https://kenzo0107.github.io/2023/04/04/2023-04-05-s3-bucket-public-access-block/</id>
    <published>2023-04-04T15:00:00.000Z</published>
    <updated>2023-04-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%81%BE%E3%81%9A%E7%B5%90%E8%AB%96">まず結論</a></li><li><a href="#%E5%85%AC%E5%BC%8F%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E5%8F%82%E7%85%A7">公式ドキュメント参照</a></li><li><a href="#%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8">試すこと</a></li><li><a href="#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F">試してみた</a><ul><li><a href="#acl-public-read-%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89">acl = public-read でファイルアップロード</a></li><li><a href="#s3-object-url-%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%8F%AF%E5%90%A6%E3%81%AE%E7%A2%BA%E8%AA%8D">S3 Object URL へのアクセス可否の確認</a></li><li><a href="#s3-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E6%9C%89%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B">S3 パブリックアクセスブロックを有効化する</a></li><li><a href="#%E5%86%8D%E3%81%B3-s3-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B">再び S3 パブリックアクセスブロックを無効化する</a></li></ul></li><li><a href="#%E7%B7%8F%E8%A9%95">総評</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>パブリックアクセスのブロックが無効となっている S3 Bucket で<br>パブリックアクセスのブロックを有効化しその後、無効化した際に<br>Object の ACL に影響があるか確認します。</p><span id="more"></span><h2><span id="まず結論">まず結論</span></h2><p>公式ドキュメントに記載がある通りであることが確認できた。</p><p>ACL = public-read の S3 Object が<br>パブリックアクセスブロックを有効化するとパブリックアクセスが不可となり<br>その後、パブリックアクセスブロックを無効化するとパブリックアクセス可能となることが確認できた。</p><p>AWS コンソール上だとパブリックアクセスブロック有効化時に<br>Everyone Read の権限が消えるので一瞬ドキッとするが、<br>無効化した際に元に戻ることが確認できた。</p><h2><span id="公式ドキュメント参照">公式ドキュメント参照</span></h2><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/access-control-block-public-access.html">https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/access-control-block-public-access.html</a></p><blockquote><p>ブロックパブリックアクセス設定は既存のポリシーまたは ACL を変更しません。そのため、ブロックパブリックアクセス設定を削除しても、パブリックポリシーまたは ACL を持つバケットまたはオブジェクトは再びパブリックにアクセス可能になります。</p></blockquote><p>パブリックアクセスのブロックを有効化し、その後、無効にしてもオブジェクトの ACL には影響がない、<br>とのこと。</p><h2><span id="試すこと">試すこと</span></h2><ol><li>パブリックアクセスブロック無効の S3 Bucket 作成</li><li>acl = public-read のファイルを S3 にアップロード</li><li>ファイルに S3 Object URL でアクセスできることを確認</li><li>S3 のパブリックアクセスブロックを有効化</li><li>ファイルに S3 Object URL でアクセスできないことを確認</li><li>S3 のパブリックアクセスブロックを無効化</li><li>ファイルに S3 Object URL でアクセスできることを確認</li></ol><h2><span id="試してみた">試してみた</span></h2><details><summary>terraform でテスト用の S3 Bucket 作成</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_s3_bucket&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = &quot;test-by-kenzo-tanaka&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_s3_bucket_acl&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.id</span><br><span class="line">  acl    = &quot;private&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_s3_bucket_versioning&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.id</span><br><span class="line">  versioning_configuration &#123;</span><br><span class="line">    status = &quot;Enabled&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_s3_bucket_logging&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.id</span><br><span class="line"></span><br><span class="line">  target_bucket = aws_s3_bucket.logs.id</span><br><span class="line">  target_prefix = &quot;s3/$&#123;aws_s3_bucket.test.id&#125;/&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_s3_bucket_server_side_encryption_configuration&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.bucket</span><br><span class="line">  rule &#123;</span><br><span class="line">    apply_server_side_encryption_by_default &#123;</span><br><span class="line">      sse_algorithm = &quot;AES256&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># パブリックアクセスのブロックを無効化した状態</span><br><span class="line">resource &quot;aws_s3_bucket_public_access_block&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.id</span><br><span class="line"></span><br><span class="line">  ignore_public_acls      = false</span><br><span class="line">  restrict_public_buckets = false</span><br><span class="line">  block_public_acls       = false</span><br><span class="line">  block_public_policy     = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3><span id="acl-public-read-でファイルアップロード">acl = public-read でファイルアップロード</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;public read&quot;</span> &gt; public_read.txt</span><br><span class="line"></span><br><span class="line">// acl=public-read (公開状態) で S3 に pubilc_read.txt をアップロード</span><br><span class="line">$ aws s3 <span class="built_in">cp</span> public_read.txt s3://test-by-kenzo-tanaka/ --acl public-read</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;private&quot;</span> &gt; private.txt</span><br><span class="line"></span><br><span class="line">// acl=private (非公開状態) で S3 に private.txt をアップロード</span><br><span class="line">$ aws s3 <span class="built_in">cp</span> private.txt s3://test-by-kenzo-tanaka/ --acl private</span><br></pre></td></tr></table></figure><p>acl = public-read とした場合誰でもアクセスできる公開状態であることを確認できる。</p><p><img src="https://i.imgur.com/6jdIsrE.png"></p><p><img src="https://i.imgur.com/eJnnwA4.png"></p><h3><span id="s3-object-url-へのアクセス可否の確認">S3 Object URL へのアクセス可否の確認</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// acl = public-read にしているので S3 Object URL にアクセスできる</span><br><span class="line">$ curl -I https://test-by-kenzo-tanaka.s3.ap-northeast-1.amazonaws.com/public_read.txt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// acl = private にしているので S3 Object URL にアクセスできない</span><br><span class="line">$ curl -I https://test-by-kenzo-tanaka.s3.ap-northeast-1.amazonaws.com/private.txt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3><span id="s3-パブリックアクセスブロックを有効化する">S3 パブリックアクセスブロックを有効化する</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_s3_bucket_public_access_block&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.id</span><br><span class="line"></span><br><span class="line">  ignore_public_acls      = true</span><br><span class="line">  restrict_public_buckets = true</span><br><span class="line">  block_public_acls       = true</span><br><span class="line">  block_public_policy     = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>パブリックアクセスブロックが有効化されたことを確認<br><img src="https://i.imgur.com/Uf1JYsa.png"></p></li><li><p>public_read.txt の Everyone の Read が消えている<br><img src="https://i.imgur.com/8JtlgXd.png"></p></li><li><p>private.txt は特に変わらず<br><img src="https://i.imgur.com/45wN1Yt.png"></p></li></ul><p>public_read.txt, private.txt いずれもアクセスを試みるも 403 Forbidden となることを確認</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I https://test-by-kenzo-tanaka.s3.ap-northeast-1.amazonaws.com/public_read.txt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ curl -I https://test-by-kenzo-tanaka.s3.ap-northeast-1.amazonaws.com/private.txt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3><span id="再び-s3-パブリックアクセスブロックを無効化する">再び S3 パブリックアクセスブロックを無効化する</span></h3><p>再度パブリックアクセスブロックを無効化する</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_s3_bucket_public_access_block&quot; &quot;test&quot; &#123;</span><br><span class="line">  bucket = aws_s3_bucket.test.id</span><br><span class="line"></span><br><span class="line">  ignore_public_acls      = false</span><br><span class="line">  restrict_public_buckets = false</span><br><span class="line">  block_public_acls       = false</span><br><span class="line">  block_public_policy     = false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>パブリックアクセスのブロックが無効化されたことを確認<br><img src="https://i.imgur.com/cEbTyJe.png"></p></li><li><p>public_read.txt の Everyone の Read が復活していることを確認<br><img src="https://i.imgur.com/k5qPlMm.png"></p></li><li><p>private.txt は変わらず<br><img src="https://i.imgur.com/sCQv7F9.png"></p></li></ul><p>public_read.txt はパブリックアクセスが可能となり<br>private.txt はパブリックアクセスが不可であることが確認できました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I https://test-by-kenzo-tanaka.s3.ap-northeast-1.amazonaws.com/public_read.txt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ curl -I https://test-by-kenzo-tanaka.s3.ap-northeast-1.amazonaws.com/private.txt</span><br><span class="line"></span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2><span id="総評">総評</span></h2><p>結論に記載した通り、公式ドキュメントの通りであることが確認できました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%9A%E7%B5%90%E8%AB%96&quot;&gt;まず結論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%AC%E5%BC%8F%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E5%8F%82%E7%85%A7&quot;&gt;公式ドキュメント参照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8&quot;&gt;試すこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F&quot;&gt;試してみた&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#acl-public-read-%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89&quot;&gt;acl = public-read でファイルアップロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#s3-object-url-%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%8F%AF%E5%90%A6%E3%81%AE%E7%A2%BA%E8%AA%8D&quot;&gt;S3 Object URL へのアクセス可否の確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#s3-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E6%9C%89%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B&quot;&gt;S3 パブリックアクセスブロックを有効化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%86%8D%E3%81%B3-s3-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B&quot;&gt;再び S3 パブリックアクセスブロックを無効化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B7%8F%E8%A9%95&quot;&gt;総評&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;パブリックアクセスのブロックが無効となっている S3 Bucket で&lt;br&gt;パブリックアクセスのブロックを有効化しその後、無効化した際に&lt;br&gt;Object の ACL に影響があるか確認します。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>terraform の linter tflin を導入し、GitHub Actions で構文チェック</title>
    <link href="https://kenzo0107.github.io/2023/04/04/2023-04-05-tflint-is-good/"/>
    <id>https://kenzo0107.github.io/2023/04/04/2023-04-05-tflint-is-good/</id>
    <published>2023-04-04T15:00:00.000Z</published>
    <updated>2023-04-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#asdf-%E3%81%A7%E5%B0%8E%E5%85%A5">asdf で導入</a></li><li><a href="#github-actions-%E3%81%A7%E8%A8%AD%E5%AE%9A">GitHub Actions で設定</a></li><li><a href="#timeout-minutes-3">timeout-minutes: 3</a></li><li><a href="#github_token-%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E7%90%86%E7%94%B1">GITHUB_TOKEN を指定する理由</a></li></ul><!-- tocstop --></div></div><hr><p>terraform の linter として <a href="https://github.com/terraform-linters/tflint">tflint</a> を導入し、<br>GitHub Actions でチェックが良かったのでまとめます。</p><span id="more"></span><h2><span id="asdf-で導入">asdf で導入</span></h2><p><a href="https://asdf-vm.com/guide/introduction.html#nvm-n-rbenv-etc">asdf</a> で複数バージョンの導入・切り替えが可能です。</p><p>asdf 経由で導入</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asdf plugin-add tflint https://github.com/skyzyx/asdf-tflint</span><br></pre></td></tr></table></figure><h2><span id="github-actions-で設定">GitHub Actions で設定</span></h2><p>Pull Request 作成・更新時に tflint を走らせる設定です。</p><p>以下ディレクトリ毎に tflint を実行しています。</p><ul><li>envs/prd</li><li>envs/stg</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">name: Lint</span><br><span class="line"></span><br><span class="line">on: [pull_request]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  tflint:</span><br><span class="line">    name: tflint</span><br><span class="line">    timeout-minutes: 3</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      fail-fast: false</span><br><span class="line">      matrix:</span><br><span class="line">        directory: [&#x27;envs/prd&#x27;, &#x27;envs/stg&#x27;]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v3</span><br><span class="line"></span><br><span class="line">      - name: Pick terraform_version</span><br><span class="line">        id: tflint</span><br><span class="line">        run: echo &quot;tflint_version=$(grep tflint .tool-versions | awk &#x27;&#123;print $2&#125;&#x27;)&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="line"></span><br><span class="line">      - uses: terraform-linters/setup-tflint@v3</span><br><span class="line">        name: Setup TFLint</span><br><span class="line">        with:</span><br><span class="line">          tflint_version: v$&#123;&#123; steps.tflint.outputs.tflint_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Init TFLint</span><br><span class="line">        run: tflint --init</span><br><span class="line">        working-directory: ./$&#123;&#123; matrix.directory &#125;&#125;</span><br><span class="line">        env:</span><br><span class="line">          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting</span><br><span class="line">          GITHUB_TOKEN: $&#123;&#123; github.token &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Execute tflint</span><br><span class="line">        run: tflint</span><br><span class="line">        working-directory: ./$&#123;&#123; matrix.directory &#125;&#125;</span><br></pre></td></tr></table></figure><h2><span id="timeout-minutes-3">timeout-minutes: 3</span></h2><p>おおよそ完了する時間は 1 分も掛からないですが、3 分もあれば終わるのと<br>意図せぬ長時間の実行を回避すべく、3 分でタイムアウトする様に設定しています。</p><p>リソース数にもよるので適宜設定してください。</p><h2><span id="github_token-を指定する理由">GITHUB_TOKEN を指定する理由</span></h2><p>いらなそう？と思いましたが、公式に以下コメントがあります。</p><blockquote><p>When you install plugins with tflint –init, TFLint calls the GitHub API to get release metadata. By default, this is an unauthenticated request, subject to a rate limit of 60 requests per hour per IP address.</p></blockquote><p>認証されていないリクエストで、IP アドレスあたり 1 時間あたり 60 リクエストというレート制限がある為、<br>それを回避する為に設定する必要があるとのこと。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#asdf-%E3%81%A7%E5%B0%8E%E5%85%A5&quot;&gt;asdf で導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#github-actions-%E3%81%A7%E8%A8%AD%E5%AE%9A&quot;&gt;GitHub Actions で設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#timeout-minutes-3&quot;&gt;timeout-minutes: 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#github_token-%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E7%90%86%E7%94%B1&quot;&gt;GITHUB_TOKEN を指定する理由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;terraform の linter として &lt;a href=&quot;https://github.com/terraform-linters/tflint&quot;&gt;tflint&lt;/a&gt; を導入し、&lt;br&gt;GitHub Actions でチェックが良かったのでまとめます。&lt;/p&gt;</summary>
    
    
    
    <category term="Terraform" scheme="https://kenzo0107.github.io/categories/Terraform/"/>
    
    
  </entry>
  
  <entry>
    <title>RDS PostgreSQL バージョンアップ</title>
    <link href="https://kenzo0107.github.io/2023/03/19/2023-03-20-versionup-rds-postgresql/"/>
    <id>https://kenzo0107.github.io/2023/03/19/2023-03-20-versionup-rds-postgresql/</id>
    <published>2023-03-19T15:00:00.000Z</published>
    <updated>2023-03-19T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#db-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%B9%E6%AF%8E%E3%81%AE%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B-db-%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E8%AA%8D">DB インスタンスクラス毎のサポートする DB エンジンバージョンを確認</a></li><li><a href="#1023-%E3%81%8B%E3%82%89-146-%E3%81%B8%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%AF%E5%8F%AF%E8%83%BD%E3%81%8B">10.23 から 14.6 へのバージョンアップは可能か</a></li><li><a href="#reg-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E3%81%AA%E3%81%84%E3%81%8B%E7%AD%89%E3%81%AE%E7%A2%BA%E8%AA%8D">reg* データがないか等の確認</a></li><li><a href="#%E6%9C%80%E7%B5%82%E7%9A%84%E3%81%AA%E5%AF%BE%E5%BF%9C%E5%86%85%E5%AE%B9">最終的な対応内容</a></li><li><a href="#%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E6%89%8B%E9%A0%86">全体的な手順</a></li></ul><!-- tocstop --></div></div><hr><p>RDS PostgreSQL のバージョンアップ時にハマったことをまとめておきます。</p><span id="more"></span><h2><span id="概要">概要</span></h2><p>RDS PostgreSQL のバージョンアップ時に以下エラーが発生しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">│ Error: updating RDS DB Instance (stg-media-postgresql-10): operation error RDS: ModifyDBInstance, https response error StatusCode: 400, RequestID: 15badd67-ea50-4189-9542-deb2df162e05, api error InvalidParameterCombination: RDS does not support creating a DB instance with the following combination: DBInstanceClass=db.t2.micro, Engine=postgres, EngineVersion=14.6, LicenseModel=postgresql-license. For supported combinations of instance class and database engine version, see the documentation.</span><br></pre></td></tr></table></figure><p>db.t2.micro の場合、 postgresql 14.6 の作成をサポートしていない、<br>とのこと。</p><p>これは terraform で<br>db.t2.micro を db.t3.micro へ<br>postgresql を 10.23 を 14.6 へと<br>同時に変更しようとしても発生します。</p><h2><span id="db-インスタンスクラス毎のサポートする-db-エンジンバージョンを確認">DB インスタンスクラス毎のサポートする DB エンジンバージョンを確認</span></h2><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#Concepts.DBInstanceClass.Support">DB インスタンスクラスでサポートされている DB エンジン</a></p><p>db.t2 は PostgreSQL は 13 より前がサポート対象でした。</p><h2><span id="1023-から-146-へのバージョンアップは可能か">10.23 から 14.6 へのバージョンアップは可能か</span></h2><p><img src="https://i.imgur.com/MCMwjkj.png"></p><p><a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion">Choosing a major version upgrade for PostgreSQL</a></p><p>10.23 は 14.6 へのバージョンアップが可能であることが確認できた。</p><h2><span id="reg-データがないか等の確認">reg* データがないか等の確認</span></h2><p><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion.Process">メジャーバージョンのアップグレードを実施する方法</a></p><p>上記手順に従って実施します。</p><blockquote><p>準備済みのトランザクション - アップグレードを実行する前に、すべての準備済みのトランザクションをコミットまたはロールバックします。</p><p>次のクエリを使用して、開いている準備済みのトランザクションがインスタンスにないことを確認します。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM pg_catalog.pg_prepared_xacts;</span><br></pre></td></tr></table></figure><blockquote><p>Reg* データ型 - アップグレードの実施前に reg* データ型の使用をすべて削除します。regtype と regclass を除き、reg* データ型をアップグレードすることはできません。このデータ型は、Amazon RDS でのアップグレードで使用されているため、pg_upgrade ユーティリティで維持することはできません。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_attribute a</span><br><span class="line">  WHERE c.oid = a.attrelid</span><br><span class="line">      AND NOT a.attisdropped</span><br><span class="line">      AND a.atttypid IN (&#x27;pg_catalog.regproc&#x27;::pg_catalog.regtype,</span><br><span class="line">                         &#x27;pg_catalog.regprocedure&#x27;::pg_catalog.regtype,</span><br><span class="line">                         &#x27;pg_catalog.regoper&#x27;::pg_catalog.regtype,</span><br><span class="line">                         &#x27;pg_catalog.regoperator&#x27;::pg_catalog.regtype,</span><br><span class="line">                         &#x27;pg_catalog.regconfig&#x27;::pg_catalog.regtype,</span><br><span class="line">                         &#x27;pg_catalog.regdictionary&#x27;::pg_catalog.regtype)</span><br><span class="line">      AND c.relnamespace = n.oid</span><br><span class="line">      AND n.nspname NOT IN (&#x27;pg_catalog&#x27;, &#x27;information_schema&#x27;);</span><br></pre></td></tr></table></figure><p>対象 DB では上記特段検出されず問題ないことを確認できました。</p><h2><span id="最終的な対応内容">最終的な対応内容</span></h2><ol><li>DB インスタンスクラスを変更 db.t2 → db.t3</li><li>DB エンジンバージョン変更 10.23 → 14.6</li></ol><p>1 と 2 を同時実行はできず、冒頭のエラー文が表示されます。<br>terraform でも AWS コンソール上でも同様のエラー文です。</p><p>1 を実行後、2 を実行する必要がありました。</p><h2><span id="全体的な手順">全体的な手順</span></h2><ol><li>検証環境でメンテナンスのリハーサル</li><li>本番環境でメンテナンス</li></ol><p>全体的には上記手順で進めました。<br>リハーサルで全体のメンテ時間と作業内容の再確認をしておくと<br>本番でテンパらずにいけるかなと。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#db-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%B9%E6%AF%8E%E3%81%AE%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B-db-%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E7%A2%BA%E8%AA%8D&quot;&gt;DB インスタンスクラス毎のサポートする DB エンジンバージョンを確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1023-%E3%81%8B%E3%82%89-146-%E3%81%B8%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%AF%E5%8F%AF%E8%83%BD%E3%81%8B&quot;&gt;10.23 から 14.6 へのバージョンアップは可能か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reg-%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E3%81%AA%E3%81%84%E3%81%8B%E7%AD%89%E3%81%AE%E7%A2%BA%E8%AA%8D&quot;&gt;reg* データがないか等の確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9C%80%E7%B5%82%E7%9A%84%E3%81%AA%E5%AF%BE%E5%BF%9C%E5%86%85%E5%AE%B9&quot;&gt;最終的な対応内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E6%89%8B%E9%A0%86&quot;&gt;全体的な手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;RDS PostgreSQL のバージョンアップ時にハマったことをまとめておきます。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>RDS DB メンテ回避方法</title>
    <link href="https://kenzo0107.github.io/2023/02/16/2023-02-17-avoid-rds-maintenance/"/>
    <id>https://kenzo0107.github.io/2023/02/16/2023-02-17-avoid-rds-maintenance/</id>
    <published>2023-02-16T15:00:00.000Z</published>
    <updated>2023-02-16T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E7%B5%90%E8%AB%96">結論</a><ul><li><a href="#aws-cli-%E3%81%A7%E3%82%82%E7%A2%BA%E8%AA%8D">aws-cli でも確認</a></li></ul></li><li><a href="#aws-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%A7%E3%83%A1%E3%83%B3%E3%83%86%E5%BB%B6%E6%9C%9F%E6%96%B9%E6%B3%95%E3%81%AE%E8%A8%98%E8%BC%89%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E3%81%8C">AWS ドキュメントでメンテ延期方法の記載があったが…</a></li><li><a href="#%E7%AA%81%E7%99%BA%E7%9A%84%E3%81%AA%E3%83%A1%E3%83%B3%E3%83%86%E3%81%AF%E8%B5%B7%E3%81%93%E3%82%8A%E5%BE%97%E3%82%8B%E3%82%82%E3%81%AE%E3%81%AA%E3%81%AE%E3%81%8B-%E3%81%BE%E3%81%9F%E6%A4%9C%E7%9F%A5%E6%96%B9%E6%B3%95%E3%81%AF">突発的なメンテは起こり得るものなのか？ また検知方法は？</a></li><li><a href="#%E6%A4%9C%E7%9F%A5%E6%96%B9%E6%B3%95">検知方法</a></li></ul><!-- tocstop --></div></div><hr><p>RDS で突如として対応必須のメンテナンスが現れた時にメンテ延期した方法をまとめました。</p><span id="more"></span><h2><span id="概要">概要</span></h2><p>突如として <code>2 日後</code> に自動適用される DB エンジンバージョンアップのメンテナンスが現れました。</p><p>通常であれば AWS からの 1 ヶ月以上前に事前の通知メールがあり、余裕を持って対応できたいたのですが、あまりに突然で回避方法を AWS SA さんやサポートに問い合わせました。</p><h2><span id="結論">結論</span></h2><p>メンテナンスウィンドウを変更することで延期することができました。</p><p><img src="https://i.imgur.com/7h0nRNw.png"></p><p>元々の <code>Apply date</code> が <code>2023-02-19 04:30</code> です。</p><p><code>2023年2月17日 金曜日</code> とすると<br>次回メンテナンスウィンドウを現在日より前の <code>木曜日</code> に変更します。</p><p>terraform では以下のような修正です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- maintenance_window = &quot;sat:19:30-thu:20:00&quot;</span><br><span class="line">+ maintenance_window = &quot;thu:19:30-thu:20:00&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/8kiXsyT.png"></p><p>すると <code>Apply date</code> が <code>2023年2月24日 木曜日</code> に変更されました。</p><h3><span id="aws-cli-でも確認">aws-cli でも確認</span></h3><p><img src="https://i.imgur.com/IXctjg7.png"></p><p><code>aws rds describe-pending-maintenance-actions</code> を実施した所、<br><code>AutoAppliedAfterDate</code> や <code>CurrentApplyDate</code> が無事更新されており、<br><code>ForceApplyDate</code> もなかったことから<br>無事メンテが延期されたことを確認しました。</p><p>SA さんに念の為、確認した所、問題なさそうとのことでした。</p><h2><span id="aws-ドキュメントでメンテ延期方法の記載があったが">AWS ドキュメントでメンテ延期方法の記載があったが…</span></h2><p><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-maintenance-window/#Defer_maintenance_actions">メンテナンスアクションを延期する</a></p><p>上記参考に実施しようとしたところ、 Action のメニューに「アップグレードを延期」(Defer upgrade) はありませんでした。</p><p>※ 英語版のドキュメントでもなかったです。</p><p>これについての AWS SA さんの回答は以下の通りでした。</p><blockquote><p>ちょっと私も自分の環境で再現ができておらず、ドキュメントも見つけられていないのですが、適用できるケースとできないケースがあるのかも知れません。<br>すでにスタートした Upgrade は延期できない、とは明記されているのですが(明確なお答えができずすみません)</p></blockquote><p>今回の件では適用できないケースだったのかもしれません。</p><h2><span id="突発的なメンテは起こり得るものなのか-また検知方法は">突発的なメンテは起こり得るものなのか？ また検知方法は？</span></h2><p>AWS の回答としては以下の通りです。</p><blockquote><p>パッチの緊急性ほか、複数の要素によって、余裕を持って通知されるケースもあれば、事前通知がない状態で突然スケジュールされるケースもある</p></blockquote><blockquote><p>社内でも確認しましたが、あいにく ○ 日前までに通知する、といった明確な SLA はない</p></blockquote><p>もしメンテナンスのメール通知だけ信じていたら危うく意図せぬサービスダウンが発生していた所でした。</p><h2><span id="検知方法">検知方法</span></h2><p>EventBridge でメンテイベントの検知 →Chatbot の仕組みは手っ取り早いと思います。</p><p>参考: <a href="https://blog.serverworks.co.jp/aws-health-event-to-slack-via-aws-chatbot">EC2 等のメンテナンススケジュールを AWS Chatbot で Slack に通知する</a></p><p>私自身はメンテイベントの詳細が把握しづらいので Lambda で整形してから Slack 通知する様にしています。<br>Lambda は日次で実行し、メンテイベントが消えるまで通知し続ける様にしています。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;結論&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#aws-cli-%E3%81%A7%E3%82%82%E7%A2%BA%E8%AA%8D&quot;&gt;aws-cli でも確認&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#aws-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%A7%E3%83%A1%E3%83%B3%E3%83%86%E5%BB%B6%E6%9C%9F%E6%96%B9%E6%B3%95%E3%81%AE%E8%A8%98%E8%BC%89%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E3%81%8C&quot;&gt;AWS ドキュメントでメンテ延期方法の記載があったが…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%AA%81%E7%99%BA%E7%9A%84%E3%81%AA%E3%83%A1%E3%83%B3%E3%83%86%E3%81%AF%E8%B5%B7%E3%81%93%E3%82%8A%E5%BE%97%E3%82%8B%E3%82%82%E3%81%AE%E3%81%AA%E3%81%AE%E3%81%8B-%E3%81%BE%E3%81%9F%E6%A4%9C%E7%9F%A5%E6%96%B9%E6%B3%95%E3%81%AF&quot;&gt;突発的なメンテは起こり得るものなのか？ また検知方法は？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A4%9C%E7%9F%A5%E6%96%B9%E6%B3%95&quot;&gt;検知方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;RDS で突如として対応必須のメンテナンスが現れた時にメンテ延期した方法をまとめました。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS Bot 対策</title>
    <link href="https://kenzo0107.github.io/2022/11/28/2022-11-29-aws-block-bot/"/>
    <id>https://kenzo0107.github.io/2022/11/28/2022-11-29-aws-block-bot/</id>
    <published>2022-11-28T15:00:00.000Z</published>
    <updated>2022-11-28T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#waf-v2-%E3%81%A7-geo-%E3%83%9E%E3%83%83%E3%83%81%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%A7%E5%AF%BE%E7%AD%96">WAF v2 で GEO マッチステートメントで対策</a></li><li><a href="#waf-v2-bot-control-%E3%81%A7-bot-%E5%AF%BE%E7%AD%96">WAF v2 Bot Control で Bot 対策</a><ul><li><a href="#managedrulegroupconfigs-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84">ManagedRuleGroupConfigs をサポートしていない</a></li><li><a href="#bot-control-rules-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84">Bot Control Rules をサポートしていない</a></li><li><a href="#override-rule-group-action-%E3%81%AF%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B">Override rule group action はサポートしている</a></li><li><a href="#local-exec-%E3%81%A7-aws-cli-%E3%81%8B%E3%82%89%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86%E3%81%A8%E3%81%84%E3%81%86%E7%8C%9B%E8%80%85%E3%81%8C%E3%81%84%E3%81%9F">local-exec で aws-cli からアップデートしちゃおうという猛者がいた</a></li></ul></li><li><a href="#%E7%B7%8F%E8%A9%95">総評</a></li></ul><!-- tocstop --></div></div><hr><p>AWS で CloudFront + ECS で Web サービスを配信していますが、<br>Bot が多く、その対策を WAF で実行しようとしたい際にいくつかつまづきましたので、その備忘録になります。</p><p>以下 2 点を試しました。</p><ol><li>WAF v2 で GEO マッチステートメントで Bot のリクエスト元の海外 IP をブロック</li><li>WAF v2 Bot Control で Bot 対策</li></ol><span id="more"></span><h2><span id="waf-v2-で-geo-マッチステートメントで対策">WAF v2 で GEO マッチステートメントで対策</span></h2><p>JP (日本) 以外をブロックしました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_wafv2_web_acl&quot; &quot;main&quot; &#123;</span><br><span class="line">  # 日本以外をブロック</span><br><span class="line">  rule &#123;</span><br><span class="line">    action &#123;</span><br><span class="line">      block &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    statement &#123;</span><br><span class="line">      not_statement &#123;</span><br><span class="line">        statement &#123;</span><br><span class="line">          geo_match_statement &#123;</span><br><span class="line">            country_codes = [&quot;JP&quot;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>すると、日本からアクセスしたにも関わらず、<br>日本外と判断され、ブロックされてしまった事象がありました。</p><p>その際はスマートフォン (docomo, au, softbank) でのアクセスでした。</p><p>誤検知があったのでこの方法は回避しました。</p><h2><span id="waf-v2-bot-control-で-bot-対策">WAF v2 Bot Control で Bot 対策</span></h2><p>AWS Bot Control で bot 対策をしてみました。</p><p>こちらで現状特段大きな問題がないのですが、<br>AWS Bot Control を terraform で有効化しようとした際につまづいた点をまとめます。</p><h3><span id="managedrulegroupconfigs-をサポートしていない">ManagedRuleGroupConfigs をサポートしていない</span></h3><p>※2022-11-29 時点でサポートしておらず、 InspectionLevel の設定ができません。</p><p><a href="https://github.com/hashicorp/terraform-provider-aws/issues/23290">https://github.com/hashicorp/terraform-provider-aws/issues/23290</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Name&quot;: &quot;AWS-AWSManagedRulesBotControlRuleSet&quot;,</span><br><span class="line">  &quot;Statement&quot;: &#123;</span><br><span class="line">    &quot;ManagedRuleGroupStatement&quot;: &#123;</span><br><span class="line">      &quot;VendorName&quot;: &quot;AWS&quot;,</span><br><span class="line">      &quot;Name&quot;: &quot;AWSManagedRulesBotControlRuleSet&quot;,</span><br><span class="line">      &quot;ManagedRuleGroupConfigs&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;AWSManagedRulesBotControlRuleSet&quot;: &#123;</span><br><span class="line">            &quot;InspectionLevel&quot;: &quot;COMMON&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><h3><span id="bot-control-rules-をサポートしていない">Bot Control Rules をサポートしていない</span></h3><p>※ 2022-11-29 時点</p><p>Bot Control Rules の設定をサポートしていないので、手動で設定等が必要です。</p><p><img src="https://i.imgur.com/I66XH5J.png"></p><h3><span id="override-rule-group-action-はサポートしている">Override rule group action はサポートしている</span></h3><p>以下設定を <code>rule &#123;&#125;</code> ブロック内に設定すれば、検知モード (ブロック等せずカウントだけ実施する) にできます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override_action &#123;</span><br><span class="line">  count &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先述した <a href="https://github.com/hashicorp/terraform-provider-aws/issues/23290">issue</a> で既に言及されているのでいずれサポートされると思います。</p><p>利用時には要注意です。</p><h3><span id="local-exec-で-aws-cli-からアップデートしちゃおうという猛者がいた">local-exec で aws-cli からアップデートしちゃおうという猛者がいた</span></h3><p><a href="https://github.com/hashicorp/terraform-provider-aws/issues/23287">https://github.com/hashicorp/terraform-provider-aws/issues/23287</a></p><p>意図しない挙動があるとも否定できないので terraform で完結させたい。<br>shell スクリプトのテストや構文チェック等をするのも憚れる。</p><h2><span id="総評">総評</span></h2><p>rate limit やその他 SQLi, XSS を設定していたとしても<br>Bot が一時的に複数 IP 元からリクエストがあると防ぐことが難しいです。</p><p>GEO 制限で抑えられたら良かったのですが、リクエストの多いサービスの場合でご検知があると<br>それだけで商用環境での利用は憚れます。</p><p>Bot Control で検知モード (Count) で様子を見て、適宜ブロック設定をしていくのが安全でした。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#waf-v2-%E3%81%A7-geo-%E3%83%9E%E3%83%83%E3%83%81%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88%E3%81%A7%E5%AF%BE%E7%AD%96&quot;&gt;WAF v2 で GEO マッチステートメントで対策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#waf-v2-bot-control-%E3%81%A7-bot-%E5%AF%BE%E7%AD%96&quot;&gt;WAF v2 Bot Control で Bot 対策&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#managedrulegroupconfigs-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84&quot;&gt;ManagedRuleGroupConfigs をサポートしていない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bot-control-rules-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84&quot;&gt;Bot Control Rules をサポートしていない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#override-rule-group-action-%E3%81%AF%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B&quot;&gt;Override rule group action はサポートしている&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#local-exec-%E3%81%A7-aws-cli-%E3%81%8B%E3%82%89%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86%E3%81%A8%E3%81%84%E3%81%86%E7%8C%9B%E8%80%85%E3%81%8C%E3%81%84%E3%81%9F&quot;&gt;local-exec で aws-cli からアップデートしちゃおうという猛者がいた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B7%8F%E8%A9%95&quot;&gt;総評&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;AWS で CloudFront + ECS で Web サービスを配信していますが、&lt;br&gt;Bot が多く、その対策を WAF で実行しようとしたい際にいくつかつまづきましたので、その備忘録になります。&lt;/p&gt;
&lt;p&gt;以下 2 点を試しました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WAF v2 で GEO マッチステートメントで Bot のリクエスト元の海外 IP をブロック&lt;/li&gt;
&lt;li&gt;WAF v2 Bot Control で Bot 対策&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript で日付計算の妙</title>
    <link href="https://kenzo0107.github.io/2022/10/30/2022-10-31-js-get-a-last-month/"/>
    <id>https://kenzo0107.github.io/2022/10/30/2022-10-31-js-get-a-last-month/</id>
    <published>2022-10-30T15:00:00.000Z</published>
    <updated>2022-10-30T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>問題です。以下コードを実行した際に何と出力されるでしょう？<br>先月の 1 日を取得したい気持ちです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let dt = new Date(&#x27;2022-10-31T15:00:00+0900&#x27;);</span><br><span class="line">dt.setMonth(dt.getMonth() - 1);</span><br><span class="line">dt.setDate(1)</span><br><span class="line">console.log(dt); // =&gt; ?</span><br></pre></td></tr></table></figure><span id="more"></span><p>答えは <code>2022-10-01T06:00:00.000Z</code> です。</p><p>10 月 31 日の 1 ヶ月前は 9 月 31 日、<br>9 月は 30 日までなのでその翌日の 10 月 1 日になってしまったというものです。</p><p>先月の 1 日を取得する場合は先に <code>setDate(1)</code> が必要です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let dt = new Date(&#x27;2022-10-31T15:00:00+0900&#x27;);</span><br><span class="line">dt.setDate(1)</span><br><span class="line">dt.setMonth(dt.getMonth() - 1);</span><br><span class="line">console.log(dt); // =&gt; 2022-09-01T06:00:00.000Z</span><br></pre></td></tr></table></figure><p>ちなみに先月の月末は <code>setDate(0)</code> することで取得できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let dt = new Date(&#x27;2022-10-31T15:00:00+0900&#x27;);</span><br><span class="line">dt.setDate(0);</span><br><span class="line">console.log(dt); // =&gt; 2022-09-30T06:00:00.000Z</span><br></pre></td></tr></table></figure><p>Lambda で 10 月 31 日の本日に 1 ヶ月前が取得できないな？となってちょっとハマってしまった問題でした。<br>terraform で簡易的な Lambda スクリプトを管理しており、極力 package を利用せずに nodejs で日付計算したかった背景があります。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;問題です。以下コードを実行した際に何と出力されるでしょう？&lt;br&gt;先月の 1 日を取得したい気持ちです。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let dt = new Date(&amp;#x27;2022-10-31T15:00:00+0900&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dt.setMonth(dt.getMonth() - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dt.setDate(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(dt); // =&amp;gt; ?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>terraform で map 型の値を key 順にソートした上で value のリストを取得する</title>
    <link href="https://kenzo0107.github.io/2022/10/25/2022-10-26-terraform-sort-map/"/>
    <id>https://kenzo0107.github.io/2022/10/25/2022-10-26-terraform-sort-map/</id>
    <published>2022-10-25T15:00:00.000Z</published>
    <updated>2022-10-25T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>terraform で map 型を for で整形した際に key を昇順にソートして並べてくれます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;for k, v in &#123;&quot;a&quot;:3, &quot;c&quot;:2, &quot;d&quot;:1&#125;: v =&gt; k&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;1&quot; = &quot;d&quot;</span><br><span class="line">  &quot;2&quot; = &quot;c&quot;</span><br><span class="line">  &quot;3&quot; = &quot;a&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; values(&#123;for k, v in &#123;&quot;a&quot;:3, &quot;c&quot;:2, &quot;d&quot;:1&#125;: v =&gt; k&#125;)</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &quot;d&quot;,</span><br><span class="line">  &quot;c&quot;,</span><br><span class="line">  &quot;a&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>これを利用し、data リソースで取得した Subnet ID を AZ 順 (a → c → d) に list で取得してみます。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data &quot;aws_subnets&quot; &quot;public&quot; &#123;</span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;vpc-id&quot;</span><br><span class="line">    values = [&quot;xxxxx&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  filter &#123;</span><br><span class="line">    name   = &quot;tag:Name&quot;</span><br><span class="line">    values = [&quot;public-*&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data &quot;aws_subnet&quot; &quot;public&quot; &#123;</span><br><span class="line">  for_each = toset(data.aws_subnets.public.ids)</span><br><span class="line"></span><br><span class="line">  id = each.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">values(&#123; for id, s in data.aws_subnet.public : s.availability_zone =&gt; id &#125;)</span><br><span class="line"># [</span><br><span class="line">#   &quot;subnet-xxx&quot;, # ap-northeast-1a</span><br><span class="line">#   &quot;subnet-yyy&quot;, # ap-northeast-1c</span><br><span class="line">#   &quot;subnet-zzz&quot;, # ap-northeast-1d</span><br><span class="line"># ]</span><br></pre></td></tr></table></figure><p>以下の様に EC2 インスタンスを 10 台起動するときに Subnet の AZ を a, c, d と順々に振り分けたい場合などに便利です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">    az_count = length(data.aws_availability_zones.available.names)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;app&quot; &#123;</span><br><span class="line">  count = 10</span><br><span class="line"></span><br><span class="line">  # NOTE: map 型にすることで key の昇順で並ぶことを利用し AZ を a → c → d と並べている</span><br><span class="line">  subnet_id = values(&#123; for id, s in data.aws_subnet.public : s.availability_zone =&gt; id &#125;)[count.index % local.az_count]</span><br></pre></td></tr></table></figure><p>以上、参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;terraform で map 型を for で整形した際に key を昇順にソートして並べてくれます。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &amp;#123;for k, v in &amp;#123;&amp;quot;a&amp;quot;:3, &amp;quot;c&amp;quot;:2, &amp;quot;d&amp;quot;:1&amp;#125;: v =&amp;gt; k&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;1&amp;quot; = &amp;quot;d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;2&amp;quot; = &amp;quot;c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;3&amp;quot; = &amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; values(&amp;#123;for k, v in &amp;#123;&amp;quot;a&amp;quot;:3, &amp;quot;c&amp;quot;:2, &amp;quot;d&amp;quot;:1&amp;#125;: v =&amp;gt; k&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;d&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;c&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;a&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;これを利用し、data リソースで取得した Subnet ID を AZ 順 (a → c → d) に list で取得してみます。&lt;/p&gt;</summary>
    
    
    
    <category term="Terraform" scheme="https://kenzo0107.github.io/categories/Terraform/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS ElastiCache Redis バージョンアップ&amp;ノードタイプ変更時の注意点</title>
    <link href="https://kenzo0107.github.io/2022/09/28/2022-09-29-upgrade_elasticache_redis/"/>
    <id>https://kenzo0107.github.io/2022/09/28/2022-09-29-upgrade_elasticache_redis/</id>
    <published>2022-09-28T15:00:00.000Z</published>
    <updated>2022-09-28T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>AWS より cache.m3 系から cache.m5 系へのアップグレードを促されました。</p><blockquote><p>One or more of your Amazon ElastiCache clusters is running on our previous generation node type cache.m3.medium. We strongly recommend that you migrate to one of our latest generation node types, and with ElastiCache it is fast and easy to choose a new instance type for your cluster.</p><p>Our latest generation node types offer benefits such as better price per compute performance, higher-performing CPUs, improved memory, network performance, and ElastiCache optimizations such as enhanced I/O that provides improved throughput per node.</p><p>Migration to the latest generation node types is available via our scale-up feature. To scale up your cluster:<br>First, determine the best upgrade path from your previous generation node type(s) to the latest generation, see <a href="https://aws.amazon.com/elasticache/previous-generation">https://aws.amazon.com/elasticache/previous-generation</a></p></blockquote><p>アップグレード時の注意事項をまとめます。</p><h2><span id="結論">結論</span></h2><span id="more"></span><ol><li>Redis のスナップショットを取る</li><li>スナップショットを元に希望のバージョン・ノードタイプの Redis を作成</li><li>アプリケーションのエンドポイントを変更</li></ol><p>バージョンアップ時に再作成となる場合があり上記の対応を取りました。<br>※ terraform plan でバージョン変更時に再作成となったことで発覚し、コンソール上で試しても実行できないことがわかった。</p><p>また、ノードタイプの変更時のデータ保持はベストエフォートとなる為、欠損する可能性があります。<br>その為、Redis にアクセスされない状態にした上でスナップショットを取り、それを元に新たに Redis を作成することで対応しました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;AWS より cache.m3 系から cache.m5 系へのアップグレードを促されました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One or more of your Amazon ElastiCache clusters is running on our previous generation node type cache.m3.medium. We strongly recommend that you migrate to one of our latest generation node types, and with ElastiCache it is fast and easy to choose a new instance type for your cluster.&lt;/p&gt;
&lt;p&gt;Our latest generation node types offer benefits such as better price per compute performance, higher-performing CPUs, improved memory, network performance, and ElastiCache optimizations such as enhanced I/O that provides improved throughput per node.&lt;/p&gt;
&lt;p&gt;Migration to the latest generation node types is available via our scale-up feature. To scale up your cluster:&lt;br&gt;First, determine the best upgrade path from your previous generation node type(s) to the latest generation, see &lt;a href=&quot;https://aws.amazon.com/elasticache/previous-generation&quot;&gt;https://aws.amazon.com/elasticache/previous-generation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;アップグレード時の注意事項をまとめます。&lt;/p&gt;
&lt;h2 id=&quot;結論&quot;&gt;&lt;a href=&quot;#結論&quot; class=&quot;headerlink&quot; title=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>tfsec で terraform 管理リソースのセキュリティ強化</title>
    <link href="https://kenzo0107.github.io/2022/09/12/2022-09-13-setup-tfsec/"/>
    <id>https://kenzo0107.github.io/2022/09/12/2022-09-13-setup-tfsec/</id>
    <published>2022-09-12T15:00:00.000Z</published>
    <updated>2022-09-12T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB-tfsec-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">ローカルに tfsec インストール</a></li><li><a href="#%E5%80%8B%E3%80%85%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D">個々のリソースでルールを除外したいとき</a></li><li><a href="#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%85%A8%E4%BD%93%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D">プロジェクト全体でルールを除外したいとき</a></li><li><a href="#github-actions-%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B">GitHub Actions で実行する</a></li><li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li></ul><!-- tocstop --></div></div><hr><p><a href="https://github.com/aquasecurity/tfsec">tfsec</a> を使用し <a href="https://www.terraform.io/">Terraform</a> で管理するリソースのセキュリティを強化する手順を記載します。</p><span id="more"></span><h2><span id="ローカルに-tfsec-インストール">ローカルに tfsec インストール</span></h2><p>以下例では <a href="https://github.com/asdf-vm/asdf">asdf</a> を利用し導入しています。<br>asdf は多数言語に対応しており、 rubyenv, nodenv, goenv の様な個々の言語のバージョン切り替えよりも同様の手順でバージョン切り替えが可能で有用です。</p><p>参考: <a href="https://github.com/woneill/asdf-tfsec">https://github.com/woneill/asdf-tfsec</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">asdf plugin-add tfsec https://github.com/woneill/asdf-tfsec</span><br><span class="line"></span><br><span class="line">管理バージョン表示</span><br><span class="line">asdf list all tfsec</span><br><span class="line">...</span><br><span class="line">1.27.4</span><br><span class="line">1.27.5</span><br><span class="line">1.27.6</span><br><span class="line"></span><br><span class="line">asdf install tfsec 1.27.6</span><br><span class="line"></span><br><span class="line">// ローカルの設定</span><br><span class="line">asdf local tfsec 1.27.6</span><br><span class="line"></span><br><span class="line">// 上記処理で .tool-versions に `tfsec 1.27.6` が追記される</span><br><span class="line">cat .tool-versions</span><br></pre></td></tr></table></figure><h2><span id="個々のリソースでルールを除外したいとき">個々のリソースでルールを除外したいとき</span></h2><p>各リソースで <code>tfsec:ignore</code> でルールを除外します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_lb&quot; &quot;dummy&quot; &#123;</span><br><span class="line">  internal = false # tfsec:ignore:aws-elb-alb-not-public インターネットからのアクセスをする為、許容する</span><br></pre></td></tr></table></figure><p>以下の様にリソースの上にコメントして追記しても除外が可能ですが、<br>複数ある場合に見づらくなる為、個人的には上記の各パラメータに設定する方が見通しが良くなると考えております。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># tfsec:ignore:aws-elb-alb-not-public インターネットからのアクセスをする為、許容する</span><br><span class="line">resource &quot;aws_lb&quot; &quot;dummy&quot; &#123;</span><br><span class="line">  internal = false</span><br></pre></td></tr></table></figure><h2><span id="プロジェクト全体でルールを除外したいとき">プロジェクト全体でルールを除外したいとき</span></h2><p>参考: <a href="https://aquasecurity.github.io/tfsec/v1.27.6/getting-started/configuration/config/">https://aquasecurity.github.io/tfsec/v1.27.6/getting-started/configuration/config/</a></p><p>.tfsec/config.yml を作成し、除外したいルールを追加します。<br>あくまでも以下はサンプルで、個々の運用によって除外ルールは変更してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">exclude:</span><br><span class="line">  # NOTE: IAM Policy で * (ワイルドカード) の使用を回避すると工数増となり対応が難しくなることが多い為、除外する</span><br><span class="line">  - aws-iam-no-policy-wildcards</span><br><span class="line"></span><br><span class="line">  # ALB を internet-facing で利用したい場合が主なので除外する</span><br><span class="line">  - aws-elb-alb-not-public</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// tfsec 実行ディレクトリを ./envs/prd としています。</span><br><span class="line">tfsec --config-file .tfsec/config.yml ./envs/prd</span><br></pre></td></tr></table></figure><h2><span id="github-actions-で実行する">GitHub Actions で実行する</span></h2><p>Pull Request 作成時をトリガーに tfsec が実行される様になります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name: tfsec</span><br><span class="line"></span><br><span class="line">on: [pull_request]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  tfsec:</span><br><span class="line">    name: tfsec</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    timeout-minutes: 3</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      fail-fast: false</span><br><span class="line">      matrix:</span><br><span class="line">        directory: [&#x27;envs/prd&#x27;, &#x27;envs/stg&#x27;]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line"></span><br><span class="line">      - name: Pick tfsec version</span><br><span class="line">        id: tfsec</span><br><span class="line">        run: echo ::set-output name=tfsec_version::$(grep tfsec .tool-versions| awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">      - name: install tfsec</span><br><span class="line">        run: |</span><br><span class="line">          curl -L https://github.com/tfsec/tfsec/releases/download/v$&#123;&#123; steps.tfsec.outputs.tfsec_version &#125;&#125;/tfsec-linux-amd64 &gt; /tmp/tfsec</span><br><span class="line">          chmod +x /tmp/tfsec</span><br><span class="line">          sudo mv /tmp/tfsec /usr/local/bin</span><br><span class="line"></span><br><span class="line">      - name: Terraform security scan</span><br><span class="line">        run: tfsec --config-file .tfsec/config.yml $&#123;&#123; matrix.directory &#125;&#125;</span><br></pre></td></tr></table></figure><h2><span id="まとめ">まとめ</span></h2><p>tfsec を導入することで AWS Config 非準拠ルールへの対応の数多くが実行でき、よりセキュアなアーキテクチャ構築に寄与できます。<br>Pull Request で tfsec をパスしないとマージできない様にすることで運用ルールとして自動的に適用できるのでよりお勧めです。</p><p>そして、 SaaS のサービスは日々進化しており、 tfsec もそれに追従しています。<br>tfsec の定期的なバージョンアップが必須なのでお気をつけください。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB-tfsec-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&quot;&gt;ローカルに tfsec インストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%80%8B%E3%80%85%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D&quot;&gt;個々のリソースでルールを除外したいとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%85%A8%E4%BD%93%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D&quot;&gt;プロジェクト全体でルールを除外したいとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#github-actions-%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B&quot;&gt;GitHub Actions で実行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%A8%E3%82%81&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aquasecurity/tfsec&quot;&gt;tfsec&lt;/a&gt; を使用し &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; で管理するリソースのセキュリティを強化する手順を記載します。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>マルチステージビルドで alpine イメージに nodejs をセットアップする</title>
    <link href="https://kenzo0107.github.io/2022/08/23/2022-08-24-setup-nodejs-on-alpine/"/>
    <id>https://kenzo0107.github.io/2022/08/23/2022-08-24-setup-nodejs-on-alpine/</id>
    <published>2022-08-23T15:00:00.000Z</published>
    <updated>2022-08-23T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><!-- tocstop --></div></div><hr><p>php の alpine ベースイメージに nodejs をセットアップする場合、<br><code>apk add nodejs</code> でインストールも可能ですが、<br>マルチステージビルドで node の alpine イメージから node を動作させるのに必要なファイルをコピーすることで実現可能なので設定がシンプルです。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM node:16.15.1-alpine AS node</span><br><span class="line"></span><br><span class="line">FROM php:8.0.19-fpm-alpine AS main</span><br><span class="line"></span><br><span class="line"># node イメージから nodejs セットアップに必要なファイルをコピー</span><br><span class="line">COPY --from=node /usr/lib /usr/lib</span><br><span class="line">COPY --from=node /usr/local/share /usr/local/share</span><br><span class="line">COPY --from=node /usr/local/lib /usr/local/lib</span><br><span class="line">COPY --from=node /usr/local/include /usr/local/include</span><br><span class="line">COPY --from=node /usr/local/bin /usr/local/bin</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;



&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;php の alpine ベースイメージに nodejs をセットアップする場合、&lt;br&gt;&lt;code&gt;apk add nodejs&lt;/code&gt; でインストールも可能ですが、&lt;br&gt;マルチステージビルドで node の alpine イメージから node を動作させるのに必要なファイルをコピーすることで実現可能なので設定がシンプルです。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ebitengine インストール時に Xcode ライセンスに同意しておきましょう</title>
    <link href="https://kenzo0107.github.io/2022/08/20/2022-08-21-install-ebitengine-on-mac/"/>
    <id>https://kenzo0107.github.io/2022/08/20/2022-08-21-install-ebitengine-on-mac/</id>
    <published>2022-08-20T15:00:00.000Z</published>
    <updated>2022-08-20T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83">実行環境</a></li><li><a href="#ebiten-%E5%B0%8E%E5%85%A5%E6%99%82%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC">ebiten 導入時にエラー</a></li><li><a href="#%E5%86%8D%E5%BA%A6%E5%AE%9F%E8%A1%8C">再度実行</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p><a href="https://ebiten.org/documents/install.html?os=darwin">公式 ebitengine インストール</a> の通り、<br>MacOS で ebitengine 導入時に一手間あったので備忘録</p><span id="more"></span><h2><span id="実行環境">実行環境</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sw_vers</span><br><span class="line"></span><br><span class="line">ProductName:    macOS</span><br><span class="line">ProductVersion: 11.6.3</span><br><span class="line">BuildVersion:   20G415</span><br></pre></td></tr></table></figure><h2><span id="ebiten-導入時にエラー">ebiten 導入時にエラー</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get github.com/hajimehoshi/ebiten/v2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github.com/go-gl/glfw/v3.3/glfw</span></span><br><span class="line"></span><br><span class="line">You have not agreed to the Xcode license agreements, please run &#x27;sudo xcodebuild -license&#x27; from within a Terminal window to review and agree to the Xcode license agreements.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">github.com/hajimehoshi/ebiten/v2/internal/graphicsdriver/metal/mtl</span></span><br><span class="line"></span><br><span class="line">You have not agreed to the Xcode license agreements, please run &#x27;sudo xcodebuild -license&#x27; from within a Terminal window to revi</span><br><span class="line">ew and agree to the Xcode license agreements.</span><br></pre></td></tr></table></figure><p>上記エラー文の通り、Xcode ライセンスに同意します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo xcodebuild -license</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">By typing &#x27;agree&#x27; you are agreeing to the terms of the software license agreements. Type &#x27;print&#x27; to print them or anything else</span><br><span class="line">to cancel, [agree, print, cancel] (agree と入力し実行)</span><br></pre></td></tr></table></figure><h2><span id="再度実行">再度実行</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get github.com/hajimehoshi/ebiten/v2</span></span><br><span class="line">go get: added github.com/go-gl/glfw/v3.3/glfw v0.0.0-20220320163800-277f93cfa958</span><br><span class="line">go get: added github.com/gofrs/flock v0.8.1</span><br><span class="line">go get: added github.com/hajimehoshi/ebiten/v2 v2.3.7</span><br><span class="line">go get: added github.com/jezek/xgb v1.0.0</span><br><span class="line">go get: added golang.org/x/exp v0.0.0-20190731235908-ec7cb31e5a56</span><br><span class="line">go get: added golang.org/x/image v0.0.0-20220321031419-a8550c1d254a</span><br><span class="line">go get: added golang.org/x/mobile v0.0.0-20220518205345-8578da9835fd</span><br><span class="line">go get: added golang.org/x/sync v0.0.0-20210220032951-036812b2e83c</span><br><span class="line">go get: added golang.org/x/sys v0.0.0-20220408201424-a24fb2fb8a0f</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run -tags=example github.com/hajimehoshi/ebiten/v2/examples/rotate</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4It5iQF.png"></p><p>できた ♪</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83&quot;&gt;実行環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ebiten-%E5%B0%8E%E5%85%A5%E6%99%82%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC&quot;&gt;ebiten 導入時にエラー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%86%8D%E5%BA%A6%E5%AE%9F%E8%A1%8C&quot;&gt;再度実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ebiten.org/documents/install.html?os=darwin&quot;&gt;公式 ebitengine インストール&lt;/a&gt; の通り、&lt;br&gt;MacOS で ebitengine 導入時に一手間あったので備忘録&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RPi opencv で笑顔検知して Slack に通知するカメラを作った</title>
    <link href="https://kenzo0107.github.io/2022/08/09/2022-08-10-raspberrypi-bullseye-opencv-setup/"/>
    <id>https://kenzo0107.github.io/2022/08/09/2022-08-10-raspberrypi-bullseye-opencv-setup/</id>
    <published>2022-08-09T15:00:00.000Z</published>
    <updated>2022-08-09T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#bullseye-64-bit-with-desktop-%E3%82%92%E9%81%B8%E6%8A%9E">bullseye 64-bit with Desktop を選択</a></li><li><a href="#%E6%89%8B%E9%A0%86">手順</a></li><li><a href="#%E7%B7%8F%E8%A9%95">総評</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>以前 RPi bullseye でカメラモジュール周りの設定が変わったことについて記載させていただきました。</p><a href="https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://kenzo0107.github.io/img/og_image.png"></div><div class="descriptions"><div class="og-title">fix the system should be configured for the legacy camera stack</div><div class="og-description">ToC     概要 libcamera を利用しよう legacy camera stack をサポートしても良し        概要Raspberry PI bullseye で raspistill -o test.jpg 実行時に掲題のエラーが発生しました。 123$ r…</div></div></div></a><p>RPi で opencv をセットアップする記事をネット上でいくつか見ましたが<br>bullseye より前のバージョンでの場合が多く、うまくいかないということが多かったです。</p><p>その為、 bullseye での設定をまとめます。</p><span id="more"></span><h2><span id="bullseye-64-bit-with-desktop-を選択">bullseye 64-bit with Desktop を選択</span></h2><p><code>64-bit</code> の <code>Desktop</code> ありを選択しました。</p><p>ヘッドレスでも良かったのですが、RPi に接続したモニターに検知する顔を写しながら opencv を使いたかったので Desktop にしました。</p><p>実施した環境として OS 情報を記載しておきます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsb_release -a</span></span><br><span class="line"></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Debian</span><br><span class="line">Description:    Debian GNU/Linux 11 (bullseye)</span><br><span class="line">Release:        11</span><br><span class="line">Codename:       bullseye</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">uname</span> -a</span></span><br><span class="line"></span><br><span class="line">Linux pi3b-smile 5.15.32-v8+ #1538 SMP PREEMPT Thu Mar 31 19:40:39 BST 2022 aarch64 GNU/Linux</span><br></pre></td></tr></table></figure><h2><span id="手順">手順</span></h2><p>コマンドで以下実行します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br><span class="line"></span><br><span class="line">// Interface Options を選択</span><br><span class="line">// Legacy Camera Enable/disable legacy camera support</span><br><span class="line"></span><br><span class="line">// Legacy Camera を有効化し RPi を再起動します</span><br><span class="line"></span><br><span class="line">// ↓↓↓再起動後↓↓↓</span><br><span class="line"></span><br><span class="line">// 顔認識で使う以下パッケージをインストール</span><br><span class="line">sudo apt install libatlas-base-dev libqt4-test libjasper1 libhdf5-dev</span><br><span class="line"></span><br><span class="line">// contrib モジュール入り opencv インストール</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo pip install opencv-contrib-python</span></span><br><span class="line"></span><br><span class="line">// opencv インストールできたか確認</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python</span></span><br><span class="line">// cv2 呼び出しができエラーが出ないこと</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import cv2</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; cv2.__version__</span></span><br><span class="line">&#x27;4.6.0&#x27;</span><br><span class="line"></span><br><span class="line">// OpenCV で顔検知・認識のサンプルがまとまっている Git リポジトリ取得</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/Mjrovai/OpenCV-Face-Recognition</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> OpenCV-Face-Recognition/FaceDetection/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python faceDetection.py</span></span><br></pre></td></tr></table></figure><h2><span id="総評">総評</span></h2><p>bullseye でカメラ周りの変更があったのでなかなか opencv の設定がうまくいかなかったのですが、最終的に非常にシンプルにできることがわかりました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bullseye-64-bit-with-desktop-%E3%82%92%E9%81%B8%E6%8A%9E&quot;&gt;bullseye 64-bit with Desktop を選択&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%89%8B%E9%A0%86&quot;&gt;手順&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B7%8F%E8%A9%95&quot;&gt;総評&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;以前 RPi bullseye でカメラモジュール周りの設定が変わったことについて記載させていただきました。&lt;/p&gt;
&lt;a href=&quot;https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/&quot; class=&quot;link-preview&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://kenzo0107.github.io/img/og_image.png&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;fix the system should be configured for the legacy camera stack&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;ToC     概要 libcamera を利用しよう legacy camera stack をサポートしても良し        概要Raspberry PI bullseye で raspistill -o test.jpg 実行時に掲題のエラーが発生しました。 123$ r…&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;

&lt;p&gt;RPi で opencv をセットアップする記事をネット上でいくつか見ましたが&lt;br&gt;bullseye より前のバージョンでの場合が多く、うまくいかないということが多かったです。&lt;/p&gt;
&lt;p&gt;その為、 bullseye での設定をまとめます。&lt;/p&gt;</summary>
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>Lake Formation で生成される Python スクリプトが動作しないので修正した</title>
    <link href="https://kenzo0107.github.io/2022/08/04/2022-08-05-lake-formation-incremental-database-issue/"/>
    <id>https://kenzo0107.github.io/2022/08/04/2022-08-05-lake-formation-incremental-database-issue/</id>
    <published>2022-08-04T15:00:00.000Z</published>
    <updated>2022-08-04T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%81%BE%E3%81%9A%E7%B5%90%E8%AB%96">まず結論</a></li><li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>2022.08.02 時点、<br>Lake Formation blueprint incremental database で生成された Glue Workflow を実行すると異常終了する事象がありました。</p><span id="more"></span><h2><span id="まず結論">まず結論</span></h2><p>最終的に修正されたスクリプトは以下に残しております。<br>対応内容はコミットログをご参照いただければと思います。</p><p><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl">https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl</a></p><p>主な対応内容は以下の通りです。</p><ol><li><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl/commit/24e310258bc824cac981ea0bd65a18280aa39ca7">fix: TypeError: object of type ‘filter’ has no len()</a></li><li><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl/commit/d023121709673fac768dbd2df85840e966a19955">fix: TypeError: Strings must be encoded before hashing</a></li><li><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl/commit/00112287a0deb5f85aeb3ba1c839271eb69fd4a3">fix: テーブルの suffix が重複する場合にテーブルが not found になる</a></li></ol><h2><span id="まとめ">まとめ</span></h2><p>生成されたスクリプトについては AWS SA さんに共有しており<br>ゆくゆくご対応いただけるのではないかと思います。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%9A%E7%B5%90%E8%AB%96&quot;&gt;まず結論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%A8%E3%82%81&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;2022.08.02 時点、&lt;br&gt;Lake Formation blueprint incremental database で生成された Glue Workflow を実行すると異常終了する事象がありました。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>fix the system should be configured for the legacy camera stack</title>
    <link href="https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/"/>
    <id>https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/</id>
    <published>2022-07-29T15:00:00.000Z</published>
    <updated>2022-07-29T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#libcamera-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">libcamera を利用しよう</a></li><li><a href="#legacy-camera-stack-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%82%82%E8%89%AF%E3%81%97">legacy camera stack をサポートしても良し</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>Raspberry PI bullseye で <code>raspistill -o test.jpg</code> 実行時に掲題のエラーが発生しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ raspistill -o test.jpg</span><br><span class="line"></span><br><span class="line">the system should be configured for the legacy camera stack</span><br></pre></td></tr></table></figure><p>以下公式にしっかりと bullseye 以降は libcamera ベースのスタックのみが含まれている、と記載されていました。</p><p><a href="https://www.raspberrypi.com/documentation/accessories/camera.html">https://www.raspberrypi.com/documentation/accessories/camera.html</a></p><blockquote><p>Raspberry Pi OS images from Bullseye onwards will contain only the libcamera-based stack.</p></blockquote><span id="more"></span><h2><span id="libcamera-を利用しよう">libcamera を利用しよう</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ libcamera-still -o test.jpg</span><br></pre></td></tr></table></figure><h2><span id="legacy-camera-stack-をサポートしても良し">legacy camera stack をサポートしても良し</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br><span class="line"></span><br><span class="line">// Interface Options を選択</span><br><span class="line">// Legacy Camera Enable/disable legacy camera support</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#libcamera-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%82%88%E3%81%86&quot;&gt;libcamera を利用しよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#legacy-camera-stack-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%82%82%E8%89%AF%E3%81%97&quot;&gt;legacy camera stack をサポートしても良し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Raspberry PI bullseye で &lt;code&gt;raspistill -o test.jpg&lt;/code&gt; 実行時に掲題のエラーが発生しました。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ raspistill -o test.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;the system should be configured for the legacy camera stack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以下公式にしっかりと bullseye 以降は libcamera ベースのスタックのみが含まれている、と記載されていました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.com/documentation/accessories/camera.html&quot;&gt;https://www.raspberrypi.com/documentation/accessories/camera.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Raspberry Pi OS images from Bullseye onwards will contain only the libcamera-based stack.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>Raspberry PI bullseye で motion を起動しブラウザで表示する</title>
    <link href="https://kenzo0107.github.io/2022/07/15/2022-07-16-raspberrypi-bullseye-motion/"/>
    <id>https://kenzo0107.github.io/2022/07/15/2022-07-16-raspberrypi-bullseye-motion/</id>
    <published>2022-07-15T15:00:00.000Z</published>
    <updated>2022-07-15T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#rpi-%E3%81%AE%E8%A8%AD%E5%AE%9A">RPi の設定</a></li><li><a href="#rpi-%E5%A4%96%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%A5%AD">RPi 外のマシンの作業</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>Raspberry PI bullseye で motion 起動しブラウザで表示します。</p><span id="more"></span><h2><span id="rpi-の設定">RPi の設定</span></h2><p>数行で完了します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://github.com/Motion-Project/motion/releases/download/release-4.4.0/bullseye_motion_4.4.0-1_armhf.deb</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt install -y ./bullseye_motion_4.4.0-1_armhf.deb</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim /etc/motion/motion.conf</span></span><br><span class="line">- stream_localhost on</span><br><span class="line">+ stream_localhost off</span><br></pre></td></tr></table></figure><h2><span id="rpi-外のマシンの作業">RPi 外のマシンの作業</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">open &lt;raspi ip&gt;:8081</span></span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rpi-%E3%81%AE%E8%A8%AD%E5%AE%9A&quot;&gt;RPi の設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rpi-%E5%A4%96%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%A5%AD&quot;&gt;RPi 外のマシンの作業&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Raspberry PI bullseye で motion 起動しブラウザで表示します。&lt;/p&gt;</summary>
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS CodeBuild で git lfs pull する</title>
    <link href="https://kenzo0107.github.io/2022/06/15/2022-06-16-git-lfs-pull-on-codebuild/"/>
    <id>https://kenzo0107.github.io/2022/06/15/2022-06-16-git-lfs-pull-on-codebuild/</id>
    <published>2022-06-15T15:00:00.000Z</published>
    <updated>2022-06-15T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%81%BE%E3%81%9A%E5%95%8F%E9%A1%8C%E7%99%BA%E7%94%9F%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-aws-%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AB%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F">まず問題発生について AWS サポートに問い合わせた</a></li><li><a href="#git-large-file-storage-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B">Git Large File Storage を利用する</a></li><li><a href="#%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C">チェックアウトするリポジトリ側の対応</a></li><li><a href="#codepipeline-codebuild-%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C">CodePipeline &amp; CodeBuild 側の対応</a></li><li><a href="#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB">ちなみに</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>CodePipline のソースアクションで GitHub からチェックアウトする処理がエラーとなり、異常終了する事象が発生しました。</p><p>チェックアウトする Rails プロジェクトの app/assets/images/ 以下のファイル容量が肥大化していたことが要因でした。</p><p>上記を回避すべく Git LFS を導入した話です。</p><span id="more"></span><h2><span id="まず問題発生について-aws-サポートに問い合わせた">まず問題発生について AWS サポートに問い合わせた</span></h2><p>GitHub ソースアクション v2 で障害が発生しているとのこと</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ただいまリポジトリサイズが大きい場合に GitHub ソースアクション v2 がお問い合わせいただいたエラーで失敗する事象が発生しており、製品担当部署にて原因調査を進めております。</span><br><span class="line">このたびは AWS 側の問題によりご不便ご迷惑をお掛けしておりますこと、深くお詫び申し上げます。</span><br><span class="line">誠に申し訳ございません。</span><br><span class="line"></span><br><span class="line">当該事象は CodeCommit または S3 ソースアクションで回避できることを確認しております。</span><br><span class="line">もしパイプラインの実行を急がれます場合は、これらの代替案をお試しくださいませ。</span><br></pre></td></tr></table></figure><p>CodeCommit や S3 なら回避できるとのこと。</p><ul><li>GitHub から CodeCommit に一時的に変更する<ul><li>開発フローに影響あり</li></ul></li><li>S3 へアップロードするファイルの生成等、デプロイフローを変更する<ul><li>ファイルの生成は GitHub Actions 等でやる？検証コスト掛かりそう</li></ul></li></ul><p>一時的な回避策でなく、現運用に極力影響なく、また、検証コストを下げる方法がないかと模索しました。</p><h2><span id="git-large-file-storage-を利用する">Git Large File Storage を利用する</span></h2><p><a href="https://git-lfs.github.com/">https://git-lfs.github.com</a></p><blockquote><p>Git Large File Storage（LFS）は、オーディオサンプル、ビデオ、データセット、グラフィックスなどの大きなファイルを Git 内部のテキストポインタに置き換え、ファイルの内容は GitHub.com や GitHub Enterprise などのリモートサーバに格納します。</p></blockquote><p>Git LFS を利用することで、GitHub からのチェックアウトする容量を抑え、必要箇所で git lfs pull することで回避できないかと考えました。</p><h2><span id="チェックアウトするリポジトリ側の対応">チェックアウトするリポジトリ側の対応</span></h2><p>対象のリポジトリに以下追加します。</p><p>.gitattributes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app/assets/images/**.png filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">app/assets/images/**.jpg filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">app/assets/images/**.webp filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></table></figure><p>容量の肥大化要因が Rails の app/assets/images/ 以下の画像だったので上記のように指定しています。</p><h2><span id="codepipeline-amp-codebuild-側の対応">CodePipeline &amp; CodeBuild 側の対応</span></h2><p>terraform ベースで説明しています。</p><ul><li>CodePipeline のソースアクションで full clone 設定にします。<ul><li>git メタデータを利用する必要がない場合は shallow clone の方がチェックアウトするファイルが少なくて済む</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_codepipeline&quot; &quot;deploy&quot; &#123;</span><br><span class="line">  ...</span><br><span class="line">  stage &#123;</span><br><span class="line">    name = &quot;Source&quot;</span><br><span class="line">    action &#123;</span><br><span class="line">      configuration = &#123;</span><br><span class="line">        OutputArtifactFormat = &quot;CODEBUILD_CLONE_REF&quot; # Git LFS を利用すべく git メタデータを取得する為。</span><br></pre></td></tr></table></figure><ul><li>CodeBuild にアタッチしている IAM Role に権限追加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Git LFS 管理のオブジェクトを pull する為</span><br><span class="line">statement &#123;</span><br><span class="line">  actions   = [&quot;codestar-connections:UseConnection&quot;]</span><br><span class="line">  resources = [&quot;&lt;codestarconnections_arn&gt;&quot;]</span><br></pre></td></tr></table></figure><ul><li>buildspec で git-lfs コマンドをインストールし git-lfs pull しています。<ul><li>執筆事典最新の v3.2.0 を指定</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">phases:</span><br><span class="line">  pre_build:</span><br><span class="line">    commands:</span><br><span class="line">      # Git LFS 管理のオブジェクトを pull する</span><br><span class="line">      - wget https://github.com/git-lfs/git-lfs/releases/download/v3.2.0/git-lfs-linux-amd64-v3.2.0.tar.gz</span><br><span class="line">      - tar vzxf git-lfs-linux-amd64-v3.2.0.tar.gz</span><br><span class="line">      - cd git-lfs-3.2.0 &amp;&amp; ./install.sh &amp;&amp; cd ..</span><br><span class="line">      - git remote set-url origin https://medpeer:$GITHUB_TOKEN@github.com/medpeer-dev/wac-rails</span><br><span class="line">      - git-lfs pull</span><br></pre></td></tr></table></figure><p>以上の対応でソースアクションのエラーを回避でき、無事デプロイできることを確認しました。</p><h2><span id="ちなみに">ちなみに</span></h2><p>CodePipeline がダメなら GitHub Actions ではどうか？という気持ちで試した所、<br><code>no left space on device</code> が発生してしまいました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%9A%E5%95%8F%E9%A1%8C%E7%99%BA%E7%94%9F%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-aws-%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AB%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F&quot;&gt;まず問題発生について AWS サポートに問い合わせた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#git-large-file-storage-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B&quot;&gt;Git Large File Storage を利用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C&quot;&gt;チェックアウトするリポジトリ側の対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#codepipeline-codebuild-%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C&quot;&gt;CodePipeline &amp;amp; CodeBuild 側の対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB&quot;&gt;ちなみに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;CodePipline のソースアクションで GitHub からチェックアウトする処理がエラーとなり、異常終了する事象が発生しました。&lt;/p&gt;
&lt;p&gt;チェックアウトする Rails プロジェクトの app/assets/images/ 以下のファイル容量が肥大化していたことが要因でした。&lt;/p&gt;
&lt;p&gt;上記を回避すべく Git LFS を導入した話です。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS コンソール上で CodeDeploy でデプロイ管理されている ECS Service をアップデートすると capacity provider が FARGATE になってしまう件</title>
    <link href="https://kenzo0107.github.io/2022/05/26/2022-05-27-update-ecs-service-on-aws-console/"/>
    <id>https://kenzo0107.github.io/2022/05/26/2022-05-27-update-ecs-service-on-aws-console/</id>
    <published>2022-05-26T15:00:00.000Z</published>
    <updated>2022-05-26T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>capacity provider strategy で FARGATE_SPOT に weight = 1 で全振りしていた FARGATE がいます。</p><p><img src="https://i.imgur.com/rqRuh2G.png"></p><ul><li>FARGATE_SPOT weight = 1</li><li>FARGATE weight = 0</li></ul><span id="more"></span><h2><span id="aws-コンソール上で-ecs-service-をアップデートした際の問題">AWS コンソール上で ECS Service をアップデートした際の問題</span></h2><p><img src="https://i.imgur.com/4RoXEV6.png"></p><p>Configure service で FARGATE_SPOT weight = 1 に指定しています。</p><p>ちょっとした検証でタスク定義をちょこっと変えたものを AWS コンソール上でタスク更新だけしてデプロイしました。</p><p>すると…</p><p>capacity provider strategy の設定がなくなっている…<br><img src="https://i.imgur.com/8kt06gl.png"></p><h2><span id="何故こんなことが起きるのか">何故こんなことが起きるのか？</span></h2><p><img src="https://i.imgur.com/N16Wks5.png"></p><p>AWS コンソール上で ECS Service 更新ステップを進むと<br><code>Configure CodeDeploy Deployment</code> の Revision の <code>AppSpec</code> をクリックしてみると以下設定になっていました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: 1,</span><br><span class="line">    &quot;Resources&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;TargetService&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;AWS::ECS::Service&quot;,</span><br><span class="line">                &quot;Properties&quot;: &#123;</span><br><span class="line">                    &quot;TaskDefinition&quot;: &quot;&lt;タスク定義 ARN&gt;&quot;,</span><br><span class="line">                    &quot;LoadBalancerInfo&quot;: &#123;</span><br><span class="line">                        &quot;ContainerName&quot;: &quot;nginx&quot;,</span><br><span class="line">                        &quot;ContainerPort&quot;: 80</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;PlatformVersion&quot;: &quot;LATEST&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここで capacity provider strategy の設定がありません。</p><p>その影響で更新完了後、 capacity provider strategy の設定がなくなってしまいました。</p><p>terraform で capacity provider strategy を管理していると<br>terraform apply 実施すると ECS Service が意図せず再作成となりダウンタイムが発生します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  # aws_ecs_service.app must be replaced</span><br><span class="line">-/+ resource &quot;aws_ecs_service&quot; &quot;app&quot; &#123;</span><br><span class="line"></span><br><span class="line">      + capacity_provider_strategy &#123; # forces replacement</span><br><span class="line">          + capacity_provider = &quot;FARGATE&quot;</span><br><span class="line">          + weight            = 0</span><br><span class="line">        &#125;</span><br><span class="line">      + capacity_provider_strategy &#123; # forces replacement</span><br><span class="line">          + capacity_provider = &quot;FARGATE_SPOT&quot;</span><br><span class="line">          + weight            = 1</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2><span id="対策">対策</span></h2><p>CodeDeploy で管理されている ECS Service の更新は<br>aws-cli や CodeDeploy 経由でデプロイします。</p><p><code>aws deploy create-deployment</code> のオプションで全て対応しようとするとやや複雑になります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws deploy create-deployment \</span><br><span class="line">--application-name xxx \</span><br><span class="line">--deployment-group-name yyy \</span><br><span class="line">--revision &#x27;&#123;&quot;revisionType&quot;: &quot;AppSpecContent&quot;, &quot;appSpecContent&quot;: &#123;&quot;content&quot;: &quot;&#123;\&quot;version\&quot;: 0.0, \&quot;Resources\&quot;: [&#123;\&quot;TargetService\&quot;: &#123;\&quot;Type\&quot;: \&quot;AWS::ECS::Service\&quot;, \&quot;Properties\&quot;: &#123;\&quot;TaskDefinition\&quot;: \&quot;&lt;タスク定義 ARN&gt;\&quot;, \&quot;LoadBalancerInfo\&quot;: &#123;\&quot;ContainerName\&quot;: \&quot;nginx\&quot;, \&quot;ContainerPort\&quot;: 80&#125;,\&quot;CapacityProviderStrategy\&quot;: [&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE_SPOT\&quot;,\&quot;Weight\&quot;:1&#125;,&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE\&quot;,\&quot;Weight\&quot;:0&#125;]&#125;&#125;&#125;]&#125;&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>ファイルにまとめておくとコマンドがシンプル ♪<br>（content の定義が String なので、1 行にまとめて文字列として定義しており見づらさはある）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws deploy create-deployment --cli-input-json file://deployment.json</span><br></pre></td></tr></table></figure><p>deployment.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;applicationName&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;deploymentGroupName&quot;: &quot;yyy&quot;,</span><br><span class="line">    &quot;revision&quot;: &#123;</span><br><span class="line">    &quot;revisionType&quot;: &quot;AppSpecContent&quot;,</span><br><span class="line">  &quot;appSpecContent&quot;: &#123;</span><br><span class="line">  &quot;content&quot;: &quot;&#123;\&quot;version\&quot;: 0.0, \&quot;Resources\&quot;: [&#123;\&quot;TargetService\&quot;: &#123;\&quot;Type\&quot;: \&quot;AWS::ECS::Service\&quot;, \&quot;Properties\&quot;: &#123;\&quot;TaskDefinition\&quot;: \&quot;&lt;タスク定義 ARN&gt;\&quot;, \&quot;LoadBalancerInfo\&quot;: &#123;\&quot;ContainerName\&quot;: \&quot;nginx\&quot;, \&quot;ContainerPort\&quot;: 80&#125;,\&quot;CapacityProviderStrategy\&quot;: [&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE_SPOT\&quot;,\&quot;Weight\&quot;:1&#125;,&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE\&quot;,\&quot;Weight\&quot;:0&#125;]&#125;&#125;&#125;]&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>appspec を明示的に指定することで capacity provider strategy を明示的に残すようにできることを確認しました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;capacity provider strategy で FARGATE_SPOT に weight = 1 で全振りしていた FARGATE がいます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rqRuh2G.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FARGATE_SPOT weight = 1&lt;/li&gt;
&lt;li&gt;FARGATE weight = 0&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
</feed>
