<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>長生村本郷Engineers&#39;Blog</title>
  
  <subtitle>千葉県長生村本郷育ちのエンジニアが書いているブログ</subtitle>
  <link href="https://kenzo0107.github.io/atom.xml" rel="self"/>
  
  <link href="https://kenzo0107.github.io/"/>
  <updated>2022-11-02T14:46:30.058Z</updated>
  <id>https://kenzo0107.github.io/</id>
  
  <author>
    <name>Kenzo Tanaka</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript で日付計算の妙</title>
    <link href="https://kenzo0107.github.io/2022/10/30/2022-10-31-js-get-a-last-month/"/>
    <id>https://kenzo0107.github.io/2022/10/30/2022-10-31-js-get-a-last-month/</id>
    <published>2022-10-30T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>問題です。以下コードを実行した際に何と出力されるでしょう？<br>先月の 1 日を取得したい気持ちです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let dt &#x3D; new Date(&#39;2022-10-31T15:00:00+0900&#39;);</span><br><span class="line">dt.setMonth(dt.getMonth() - 1);</span><br><span class="line">dt.setDate(1)</span><br><span class="line">console.log(dt); &#x2F;&#x2F; &#x3D;&gt; ?</span><br></pre></td></tr></table></figure><p>答えは <code>2022-10-01T06:00:00.000Z</code> です。</p><p>10 月 31 日の 1 ヶ月前は 9 月 31 日、<br>9 月は 30 日までなのでその翌日の 10 月 1 日になってしまったというものです。</p><p>先月の 1 日を取得する場合は先に <code>setDate(1)</code> が必要です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let dt &#x3D; new Date(&#39;2022-10-31T15:00:00+0900&#39;);</span><br><span class="line">dt.setDate(1)</span><br><span class="line">dt.setMonth(dt.getMonth() - 1);</span><br><span class="line">console.log(dt); &#x2F;&#x2F; &#x3D;&gt; 2022-09-01T06:00:00.000Z</span><br></pre></td></tr></table></figure><p>ちなみに先月の月末は <code>setDate(0)</code> することで取得できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let dt &#x3D; new Date(&#39;2022-10-31T15:00:00+0900&#39;);</span><br><span class="line">dt.setDate(0);</span><br><span class="line">console.log(dt); &#x2F;&#x2F; &#x3D;&gt; 2022-09-30T06:00:00.000Z</span><br></pre></td></tr></table></figure><p>Lambda で 10 月 31 日の本日に 1 ヶ月前が取得できないな？となってちょっとハマってしまった問題でした。<br>terraform で簡易的な Lambda スクリプトを管理しており、極力 package を利用せずに nodejs で日付計算したかった背景があります。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;問題です。以下コードを実行した際に何と出力されるでしょう？&lt;br&gt;先月の 1 日を取得したい気持ちです。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>terraform で map 型の値を key 順にソートした上で value のリストを取得する</title>
    <link href="https://kenzo0107.github.io/2022/10/25/2022-10-26-terraform-sort-map/"/>
    <id>https://kenzo0107.github.io/2022/10/25/2022-10-26-terraform-sort-map/</id>
    <published>2022-10-25T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>terraform で map 型を for で整形した際に key を昇順にソートして並べてくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;for k, v in &#123;&quot;a&quot;:3, &quot;c&quot;:2, &quot;d&quot;:1&#125;: v &#x3D;&gt; k&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;1&quot; &#x3D; &quot;d&quot;</span><br><span class="line">  &quot;2&quot; &#x3D; &quot;c&quot;</span><br><span class="line">  &quot;3&quot; &#x3D; &quot;a&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; values(&#123;for k, v in &#123;&quot;a&quot;:3, &quot;c&quot;:2, &quot;d&quot;:1&#125;: v &#x3D;&gt; k&#125;)</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &quot;d&quot;,</span><br><span class="line">  &quot;c&quot;,</span><br><span class="line">  &quot;a&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>これを利用し、data リソースで取得した Subnet ID を AZ 順 (a → c → d) に list で取得してみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data &quot;aws_subnets&quot; &quot;public&quot; &#123;</span><br><span class="line">  filter &#123;</span><br><span class="line">    name   &#x3D; &quot;vpc-id&quot;</span><br><span class="line">    values &#x3D; [&quot;xxxxx&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">  filter &#123;</span><br><span class="line">    name   &#x3D; &quot;tag:Name&quot;</span><br><span class="line">    values &#x3D; [&quot;public-*&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data &quot;aws_subnet&quot; &quot;public&quot; &#123;</span><br><span class="line">  for_each &#x3D; toset(data.aws_subnets.public.ids)</span><br><span class="line"></span><br><span class="line">  id &#x3D; each.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">values(&#123; for id, s in data.aws_subnet.public : s.availability_zone &#x3D;&gt; id &#125;)</span><br><span class="line"># [</span><br><span class="line">#   &quot;subnet-xxx&quot;, # ap-northeast-1a</span><br><span class="line">#   &quot;subnet-yyy&quot;, # ap-northeast-1c</span><br><span class="line">#   &quot;subnet-zzz&quot;, # ap-northeast-1d</span><br><span class="line"># ]</span><br></pre></td></tr></table></figure><p>以下の様に EC2 インスタンスを 10 台起動するときに Subnet の AZ を a, c, d と順々に振り分けたい場合などに便利です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">    az_count &#x3D; length(data.aws_availability_zones.available.names)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;app&quot; &#123;</span><br><span class="line">  count &#x3D; 10</span><br><span class="line"></span><br><span class="line">  # NOTE: map 型にすることで key の昇順で並ぶことを利用し AZ を a → c → d と並べている</span><br><span class="line">  subnet_id &#x3D; values(&#123; for id, s in data.aws_subnet.public : s.availability_zone &#x3D;&gt; id &#125;)[count.index % local.az_count]</span><br></pre></td></tr></table></figure><p>以上、参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;terraform で map 型を for で整形した際に key を昇順にソートして並べてくれます。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="Terraform" scheme="https://kenzo0107.github.io/categories/Terraform/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS ElastiCache Redis バージョンアップ&amp;ノードタイプ変更時の注意点</title>
    <link href="https://kenzo0107.github.io/2022/09/28/2022-09-29-upgrade_elasticache_redis/"/>
    <id>https://kenzo0107.github.io/2022/09/28/2022-09-29-upgrade_elasticache_redis/</id>
    <published>2022-09-28T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>AWS より cache.m3 系から cache.m5 系へのアップグレードを促されました。</p><blockquote><p>One or more of your Amazon ElastiCache clusters is running on our previous generation node type cache.m3.medium. We strongly recommend that you migrate to one of our latest generation node types, and with ElastiCache it is fast and easy to choose a new instance type for your cluster.</p><p>Our latest generation node types offer benefits such as better price per compute performance, higher-performing CPUs, improved memory, network performance, and ElastiCache optimizations such as enhanced I/O that provides improved throughput per node.</p><p>Migration to the latest generation node types is available via our scale-up feature. To scale up your cluster:<br>First, determine the best upgrade path from your previous generation node type(s) to the latest generation, see <a href="https://aws.amazon.com/elasticache/previous-generation">https://aws.amazon.com/elasticache/previous-generation</a></p></blockquote><p>アップグレード時の注意事項をまとめます。</p><h2><span id="結論">結論</span></h2><ol><li>Redis のスナップショットを取る</li><li>スナップショットを元に希望のバージョン・ノードタイプの Redis を作成</li><li>アプリケーションのエンドポイントを変更</li></ol><p>バージョンアップ時に再作成となる場合があり上記の対応を取りました。<br>※ terraform plan でバージョン変更時に再作成となったことで発覚し、コンソール上で試しても実行できないことがわかった。</p><p>また、ノードタイプの変更時のデータ保持はベストエフォートとなる為、欠損する可能性があります。<br>その為、Redis にアクセスされない状態にした上でスナップショットを取り、それを元に新たに Redis を作成することで対応しました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;AWS より cache.m3 系から cache.m5 系へのアップグレードを促されました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One or more of your Amazon ElastiCache clusters is running on our pre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tfsec で terraform 管理リソースのセキュリティ強化</title>
    <link href="https://kenzo0107.github.io/2022/09/12/2022-09-13-setup-tfsec/"/>
    <id>https://kenzo0107.github.io/2022/09/12/2022-09-13-setup-tfsec/</id>
    <published>2022-09-12T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AB-tfsec-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">ローカルに tfsec インストール</a></li><li><a href="#%E5%80%8B%E3%80%85%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D">個々のリソースでルールを除外したいとき</a></li><li><a href="#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%85%A8%E4%BD%93%E3%81%A7%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D">プロジェクト全体でルールを除外したいとき</a></li><li><a href="#github-actions-%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B">GitHub Actions で実行する</a></li><li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li></ul><!-- tocstop --></div></div><hr><p><a href="https://github.com/aquasecurity/tfsec">tfsec</a> を使用し <a href="https://www.terraform.io/">Terraform</a> で管理するリソースのセキュリティを強化する手順を記載します。</p><h2><span id="ローカルに-tfsec-インストール">ローカルに tfsec インストール</span></h2><p>以下例では <a href="https://github.com/asdf-vm/asdf">asdf</a> を利用し導入しています。<br>asdf は多数言語に対応しており、 rubyenv, nodenv, goenv の様な個々の言語のバージョン切り替えよりも同様の手順でバージョン切り替えが可能で有用です。</p><p>参考: <a href="https://github.com/woneill/asdf-tfsec">https://github.com/woneill/asdf-tfsec</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">asdf plugin-add tfsec https://github.com/woneill/asdf-tfsec</span><br><span class="line"></span><br><span class="line">管理バージョン表示</span><br><span class="line">asdf list all tfsec</span><br><span class="line">...</span><br><span class="line">1.27.4</span><br><span class="line">1.27.5</span><br><span class="line">1.27.6</span><br><span class="line"></span><br><span class="line">asdf install tfsec 1.27.6</span><br><span class="line"></span><br><span class="line">// ローカルの設定</span><br><span class="line">asdf local tfsec 1.27.6</span><br><span class="line"></span><br><span class="line">// 上記処理で .tool-versions に `tfsec 1.27.6` が追記される</span><br><span class="line">cat .tool-versions</span><br></pre></td></tr></table></figure><h2><span id="個々のリソースでルールを除外したいとき">個々のリソースでルールを除外したいとき</span></h2><p>各リソースで <code>tfsec:ignore</code> でルールを除外します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_lb&quot; &quot;dummy&quot; &#123;</span><br><span class="line">  internal &#x3D; false # tfsec:ignore:aws-elb-alb-not-public インターネットからのアクセスをする為、許容する</span><br></pre></td></tr></table></figure><p>以下の様にリソースの上にコメントして追記しても除外が可能ですが、<br>複数ある場合に見づらくなる為、個人的には上記の各パラメータに設定する方が見通しが良くなると考えております。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># tfsec:ignore:aws-elb-alb-not-public インターネットからのアクセスをする為、許容する</span><br><span class="line">resource &quot;aws_lb&quot; &quot;dummy&quot; &#123;</span><br><span class="line">  internal &#x3D; false</span><br></pre></td></tr></table></figure><h2><span id="プロジェクト全体でルールを除外したいとき">プロジェクト全体でルールを除外したいとき</span></h2><p>参考: <a href="https://aquasecurity.github.io/tfsec/v1.27.6/getting-started/configuration/config/">https://aquasecurity.github.io/tfsec/v1.27.6/getting-started/configuration/config/</a></p><p>.tfsec/config.yml を作成し、除外したいルールを追加します。<br>あくまでも以下はサンプルで、個々の運用によって除外ルールは変更してください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">exclude:</span><br><span class="line">  # NOTE: IAM Policy で * (ワイルドカード) の使用を回避すると工数増となり対応が難しくなることが多い為、除外する</span><br><span class="line">  - aws-iam-no-policy-wildcards</span><br><span class="line"></span><br><span class="line">  # ALB を internet-facing で利用したい場合が主なので除外する</span><br><span class="line">  - aws-elb-alb-not-public</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// tfsec 実行ディレクトリを ./envs/prd としています。</span><br><span class="line">tfsec --config-file .tfsec/config.yml ./envs/prd</span><br></pre></td></tr></table></figure><h2><span id="github-actions-で実行する">GitHub Actions で実行する</span></h2><p>Pull Request 作成時をトリガーに tfsec が実行される様になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name: tfsec</span><br><span class="line"></span><br><span class="line">on: [pull_request]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  tfsec:</span><br><span class="line">    name: tfsec</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    timeout-minutes: 3</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      fail-fast: false</span><br><span class="line">      matrix:</span><br><span class="line">        directory: [&#39;envs&#x2F;prd&#39;, &#39;envs&#x2F;stg&#39;]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions&#x2F;checkout@v3</span><br><span class="line"></span><br><span class="line">      - name: Pick tfsec version</span><br><span class="line">        id: tfsec</span><br><span class="line">        run: echo ::set-output name&#x3D;tfsec_version::$(grep tfsec .tool-versions| awk &#39;&#123;print $2&#125;&#39;)</span><br><span class="line"></span><br><span class="line">      - name: install tfsec</span><br><span class="line">        run: |</span><br><span class="line">          curl -L https:&#x2F;&#x2F;github.com&#x2F;tfsec&#x2F;tfsec&#x2F;releases&#x2F;download&#x2F;v$&#123;&#123; steps.tfsec.outputs.tfsec_version &#125;&#125;&#x2F;tfsec-linux-amd64 &gt; &#x2F;tmp&#x2F;tfsec</span><br><span class="line">          chmod +x &#x2F;tmp&#x2F;tfsec</span><br><span class="line">          sudo mv &#x2F;tmp&#x2F;tfsec &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line"></span><br><span class="line">      - name: Terraform security scan</span><br><span class="line">        run: tfsec --config-file .tfsec&#x2F;config.yml $&#123;&#123; matrix.directory &#125;&#125;</span><br></pre></td></tr></table></figure><h2><span id="まとめ">まとめ</span></h2><p>tfsec を導入することで AWS Config 非準拠ルールへの対応の数多くが実行でき、よりセキュアなアーキテクチャ構築に寄与できます。<br>Pull Request で tfsec をパスしないとマージできない様にすることで運用ルールとして自動的に適用できるのでよりお勧めです。</p><p>そして、 SaaS のサービスは日々進化しており、 tfsec もそれに追従しています。<br>tfsec の定期的なバージョンアップが必須なのでお気をつけください。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%A</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>マルチステージビルドで alpine イメージに nodejs をセットアップする</title>
    <link href="https://kenzo0107.github.io/2022/08/23/2022-08-24-setup-nodejs-on-alpine/"/>
    <id>https://kenzo0107.github.io/2022/08/23/2022-08-24-setup-nodejs-on-alpine/</id>
    <published>2022-08-23T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><!-- tocstop --></div></div><hr><p>php の alpine ベースイメージに nodejs をセットアップする場合、<br><code>apk add nodejs</code> でインストールも可能ですが、<br>マルチステージビルドで node の alpine イメージから node を動作させるのに必要なファイルをコピーすることで実現可能なので設定がシンプルです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM node:16.15.1-alpine AS node</span><br><span class="line"></span><br><span class="line">FROM php:8.0.19-fpm-alpine AS main</span><br><span class="line"></span><br><span class="line"># node イメージから nodejs セットアップに必要なファイルをコピー</span><br><span class="line">COPY --from&#x3D;node &#x2F;usr&#x2F;lib &#x2F;usr&#x2F;lib</span><br><span class="line">COPY --from&#x3D;node &#x2F;usr&#x2F;local&#x2F;share &#x2F;usr&#x2F;local&#x2F;share</span><br><span class="line">COPY --from&#x3D;node &#x2F;usr&#x2F;local&#x2F;lib &#x2F;usr&#x2F;local&#x2F;lib</span><br><span class="line">COPY --from&#x3D;node &#x2F;usr&#x2F;local&#x2F;include &#x2F;usr&#x2F;local&#x2F;include</span><br><span class="line">COPY --from&#x3D;node &#x2F;usr&#x2F;local&#x2F;bin &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;



&lt;!-- tocstop --&gt;

&lt;/div&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ebitengine インストール時に Xcode ライセンスに同意しておきましょう</title>
    <link href="https://kenzo0107.github.io/2022/08/20/2022-08-21-install-ebitengine-on-mac/"/>
    <id>https://kenzo0107.github.io/2022/08/20/2022-08-21-install-ebitengine-on-mac/</id>
    <published>2022-08-20T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83">実行環境</a></li><li><a href="#ebiten-%E5%B0%8E%E5%85%A5%E6%99%82%E3%81%AB%E3%82%A8%E3%83%A9%E3%83%BC">ebiten 導入時にエラー</a></li><li><a href="#%E5%86%8D%E5%BA%A6%E5%AE%9F%E8%A1%8C">再度実行</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p><a href="https://ebiten.org/documents/install.html?os=darwin">公式 ebitengine インストール</a> の通り、<br>MacOS で ebitengine 導入時に一手間あったので備忘録</p><h2><span id="実行環境">実行環境</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sw_vers</span><br><span class="line"></span><br><span class="line">ProductName:    macOS</span><br><span class="line">ProductVersion: 11.6.3</span><br><span class="line">BuildVersion:   20G415</span><br></pre></td></tr></table></figure><h2><span id="ebiten-導入時にエラー">ebiten 導入時にエラー</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/hajimehoshi/ebiten/v2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> github.com/go-gl/glfw/v3.3/glfw</span></span><br><span class="line"></span><br><span class="line">You have not agreed to the Xcode license agreements, please run 'sudo xcodebuild -license' from within a Terminal window to review and agree to the Xcode license agreements.</span><br><span class="line"><span class="meta">#</span><span class="bash"> github.com/hajimehoshi/ebiten/v2/internal/graphicsdriver/metal/mtl</span></span><br><span class="line"></span><br><span class="line">You have not agreed to the Xcode license agreements, please run 'sudo xcodebuild -license' from within a Terminal window to revi</span><br><span class="line">ew and agree to the Xcode license agreements.</span><br></pre></td></tr></table></figure><p>上記エラー文の通り、Xcode ライセンスに同意します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo xcodebuild -license</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">By typing 'agree' you are agreeing to the terms of the software license agreements. Type 'print' to print them or anything else</span><br><span class="line">to cancel, [agree, print, cancel] (agree と入力し実行)</span><br></pre></td></tr></table></figure><h2><span id="再度実行">再度実行</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/hajimehoshi/ebiten/v2</span></span><br><span class="line">go get: added github.com/go-gl/glfw/v3.3/glfw v0.0.0-20220320163800-277f93cfa958</span><br><span class="line">go get: added github.com/gofrs/flock v0.8.1</span><br><span class="line">go get: added github.com/hajimehoshi/ebiten/v2 v2.3.7</span><br><span class="line">go get: added github.com/jezek/xgb v1.0.0</span><br><span class="line">go get: added golang.org/x/exp v0.0.0-20190731235908-ec7cb31e5a56</span><br><span class="line">go get: added golang.org/x/image v0.0.0-20220321031419-a8550c1d254a</span><br><span class="line">go get: added golang.org/x/mobile v0.0.0-20220518205345-8578da9835fd</span><br><span class="line">go get: added golang.org/x/sync v0.0.0-20210220032951-036812b2e83c</span><br><span class="line">go get: added golang.org/x/sys v0.0.0-20220408201424-a24fb2fb8a0f</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run -tags=example github.com/hajimehoshi/ebiten/v2/examples/rotate</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4It5iQF.png"></p><p>できた ♪</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%8</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RPi opencv で笑顔検知して Slack に通知するカメラを作った</title>
    <link href="https://kenzo0107.github.io/2022/08/09/2022-08-10-raspberrypi-bullseye-opencv-setup/"/>
    <id>https://kenzo0107.github.io/2022/08/09/2022-08-10-raspberrypi-bullseye-opencv-setup/</id>
    <published>2022-08-09T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#bullseye-64-bit-with-desktop-%E3%82%92%E9%81%B8%E6%8A%9E">bullseye 64-bit with Desktop を選択</a></li><li><a href="#%E6%89%8B%E9%A0%86">手順</a></li><li><a href="#%E7%B7%8F%E8%A9%95">総評</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>以前 RPi bullseye でカメラモジュール周りの設定が変わったことについて記載させていただきました。</p><a href="https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://kenzo0107.github.io/img/og_image.png"></div><div class="descriptions"><div class="og-title">fix the system should be configured for the legacy camera stack</div><div class="og-description">ToC     概要 libcamera を利用しよう legacy camera stack をサポートしても良し        概要Raspberry PI bullseye で raspistill -o test.jpg 実行時に掲題のエラーが発生しました。 123$ r…</div></div></div></a><p>RPi で opencv をセットアップする記事をネット上でいくつか見ましたが<br>bullseye より前のバージョンでの場合が多く、うまくいかないということが多かったです。</p><p>その為、 bullseye での設定をまとめます。</p><h2><span id="bullseye-64-bit-with-desktop-を選択">bullseye 64-bit with Desktop を選択</span></h2><p><code>64-bit</code> の <code>Desktop</code> ありを選択しました。</p><p>ヘッドレスでも良かったのですが、RPi に接続したモニターに検知する顔を写しながら opencv を使いたかったので Desktop にしました。</p><p>実施した環境として OS 情報を記載しておきます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsb_release -a</span></span><br><span class="line"></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Debian</span><br><span class="line">Description:    Debian GNU/Linux 11 (bullseye)</span><br><span class="line">Release:        11</span><br><span class="line">Codename:       bullseye</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname -a</span></span><br><span class="line"></span><br><span class="line">Linux pi3b-smile 5.15.32-v8+ #1538 SMP PREEMPT Thu Mar 31 19:40:39 BST 2022 aarch64 GNU/Linux</span><br></pre></td></tr></table></figure><h2><span id="手順">手順</span></h2><p>コマンドで以下実行します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br><span class="line"></span><br><span class="line">// Interface Options を選択</span><br><span class="line">// Legacy Camera Enable/disable legacy camera support</span><br><span class="line"></span><br><span class="line">// Legacy Camera を有効化し RPi を再起動します</span><br><span class="line"></span><br><span class="line">// ↓↓↓再起動後↓↓↓</span><br><span class="line"></span><br><span class="line">// 顔認識で使う以下パッケージをインストール</span><br><span class="line">sudo apt install libatlas-base-dev libqt4-test libjasper1 libhdf5-dev</span><br><span class="line"></span><br><span class="line">// contrib モジュール入り opencv インストール</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pip install opencv-contrib-python</span></span><br><span class="line"></span><br><span class="line">// opencv インストールできたか確認</span><br><span class="line"><span class="meta">$</span><span class="bash"> python</span></span><br><span class="line">// cv2 呼び出しができエラーが出ないこと</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import cv2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; cv2.__version__</span></span><br><span class="line">'4.6.0'</span><br><span class="line"></span><br><span class="line">// OpenCV で顔検知・認識のサンプルがまとまっている Git リポジトリ取得</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/Mjrovai/OpenCV-Face-Recognition</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> OpenCV-Face-Recognition/FaceDetection/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python faceDetection.py</span></span><br></pre></td></tr></table></figure><h2><span id="総評">総評</span></h2><p>bullseye でカメラ周りの変更があったのでなかなか opencv の設定がうまくいかなかったのですが、最終的に非常にシンプルにできることがわかりました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%8</summary>
      
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>Lake Formation で生成される Python スクリプトが動作しないので修正した</title>
    <link href="https://kenzo0107.github.io/2022/08/04/2022-08-05-lake-formation-incremental-database-issue/"/>
    <id>https://kenzo0107.github.io/2022/08/04/2022-08-05-lake-formation-incremental-database-issue/</id>
    <published>2022-08-04T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%81%BE%E3%81%9A%E7%B5%90%E8%AB%96">まず結論</a></li><li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>2022.08.02 時点、<br>Lake Formation blueprint incremental database で生成された Glue Workflow を実行すると異常終了する事象がありました。</p><h2><span id="まず結論">まず結論</span></h2><p>最終的に修正されたスクリプトは以下に残しております。<br>対応内容はコミットログをご参照いただければと思います。</p><p><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl">https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl</a></p><p>主な対応内容は以下の通りです。</p><ol><li><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl/commit/24e310258bc824cac981ea0bd65a18280aa39ca7">fix: TypeError: object of type ‘filter’ has no len()</a></li><li><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl/commit/d023121709673fac768dbd2df85840e966a19955">fix: TypeError: Strings must be encoded before hashing</a></li><li><a href="https://github.com/kenzo0107/aws-glue-jobs-incremental-database-etl/commit/00112287a0deb5f85aeb3ba1c839271eb69fd4a3">fix: テーブルの suffix が重複する場合にテーブルが not found になる</a></li></ol><h2><span id="まとめ">まとめ</span></h2><p>生成されたスクリプトについては AWS SA さんに共有しており<br>ゆくゆくご対応いただけるのではないかと思います。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%8</summary>
      
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>fix the system should be configured for the legacy camera stack</title>
    <link href="https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/"/>
    <id>https://kenzo0107.github.io/2022/07/29/2022-07-30-fix-the-system-should-be-configured-for-the-legacy-camera-stack/</id>
    <published>2022-07-29T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#libcamera-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%82%88%E3%81%86">libcamera を利用しよう</a></li><li><a href="#legacy-camera-stack-%E3%82%92%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%97%E3%81%A6%E3%82%82%E8%89%AF%E3%81%97">legacy camera stack をサポートしても良し</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>Raspberry PI bullseye で <code>raspistill -o test.jpg</code> 実行時に掲題のエラーが発生しました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ raspistill -o test.jpg</span><br><span class="line"></span><br><span class="line">the system should be configured for the legacy camera stack</span><br></pre></td></tr></table></figure><p>以下公式にしっかりと bullseye 以降は libcamera ベースのスタックのみが含まれている、と記載されていました。</p><p><a href="https://www.raspberrypi.com/documentation/accessories/camera.html">https://www.raspberrypi.com/documentation/accessories/camera.html</a></p><blockquote><p>Raspberry Pi OS images from Bullseye onwards will contain only the libcamera-based stack.</p></blockquote><h2><span id="libcamera-を利用しよう">libcamera を利用しよう</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ libcamera-still -o test.jpg</span><br></pre></td></tr></table></figure><h2><span id="legacy-camera-stack-をサポートしても良し">legacy camera stack をサポートしても良し</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Interface Options を選択</span><br><span class="line">&#x2F;&#x2F; Legacy Camera Enable&#x2F;disable legacy camera support</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%8</summary>
      
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>Raspberry PI bullseye で motion を起動しブラウザで表示する</title>
    <link href="https://kenzo0107.github.io/2022/07/15/2022-07-16-raspberrypi-bullseye-motion/"/>
    <id>https://kenzo0107.github.io/2022/07/15/2022-07-16-raspberrypi-bullseye-motion/</id>
    <published>2022-07-15T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#rpi-%E3%81%AE%E8%A8%AD%E5%AE%9A">RPi の設定</a></li><li><a href="#rpi-%E5%A4%96%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%A5%AD">RPi 外のマシンの作業</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>Raspberry PI bullseye で motion 起動しブラウザで表示します。</p><h2><span id="rpi-の設定">RPi の設定</span></h2><p>数行で完了します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/Motion-Project/motion/releases/download/release-4.4.0/bullseye_motion_4.4.0-1_armhf.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install -y ./bullseye_motion_4.4.0-1_armhf.deb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/motion/motion.conf</span></span><br><span class="line">- stream_localhost on</span><br><span class="line">+ stream_localhost off</span><br></pre></td></tr></table></figure><h2><span id="rpi-外のマシンの作業">RPi 外のマシンの作業</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> open &lt;raspi ip&gt;:8081</span></span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%8</summary>
      
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS CodeBuild で git lfs pull する</title>
    <link href="https://kenzo0107.github.io/2022/06/15/2022-06-16-git-lfs-pull-on-codebuild/"/>
    <id>https://kenzo0107.github.io/2022/06/15/2022-06-16-git-lfs-pull-on-codebuild/</id>
    <published>2022-06-15T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%A6%82%E8%A6%81">概要</a></li><li><a href="#%E3%81%BE%E3%81%9A%E5%95%8F%E9%A1%8C%E7%99%BA%E7%94%9F%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-aws-%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AB%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F">まず問題発生について AWS サポートに問い合わせた</a></li><li><a href="#git-large-file-storage-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B">Git Large File Storage を利用する</a></li><li><a href="#%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C">チェックアウトするリポジトリ側の対応</a></li><li><a href="#codepipeline-codebuild-%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C">CodePipeline &amp; CodeBuild 側の対応</a></li><li><a href="#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB">ちなみに</a></li></ul><!-- tocstop --></div></div><hr><h2><span id="概要">概要</span></h2><p>CodePipline のソースアクションで GitHub からチェックアウトする処理がエラーとなり、異常終了する事象が発生しました。</p><p>チェックアウトする Rails プロジェクトの app/assets/images/ 以下のファイル容量が肥大化していたことが要因でした。</p><p>上記を回避すべく Git LFS を導入した話です。</p><a id="more"></a><h2><span id="まず問題発生について-aws-サポートに問い合わせた">まず問題発生について AWS サポートに問い合わせた</span></h2><p>GitHub ソースアクション v2 で障害が発生しているとのこと</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ただいまリポジトリサイズが大きい場合に GitHub ソースアクション v2 がお問い合わせいただいたエラーで失敗する事象が発生しており、製品担当部署にて原因調査を進めております。</span><br><span class="line">このたびは AWS 側の問題によりご不便ご迷惑をお掛けしておりますこと、深くお詫び申し上げます。</span><br><span class="line">誠に申し訳ございません。</span><br><span class="line"></span><br><span class="line">当該事象は CodeCommit または S3 ソースアクションで回避できることを確認しております。</span><br><span class="line">もしパイプラインの実行を急がれます場合は、これらの代替案をお試しくださいませ。</span><br></pre></td></tr></table></figure><p>CodeCommit や S3 なら回避できるとのこと。</p><ul><li>GitHub から CodeCommit に一時的に変更する<ul><li>開発フローに影響あり</li></ul></li><li>S3 へアップロードするファイルの生成等、デプロイフローを変更する<ul><li>ファイルの生成は GitHub Actions 等でやる？検証コスト掛かりそう</li></ul></li></ul><p>一時的な回避策でなく、現運用に極力影響なく、また、検証コストを下げる方法がないかと模索しました。</p><h2><span id="git-large-file-storage-を利用する">Git Large File Storage を利用する</span></h2><p><a href="https://git-lfs.github.com/">https://git-lfs.github.com</a></p><blockquote><p>Git Large File Storage（LFS）は、オーディオサンプル、ビデオ、データセット、グラフィックスなどの大きなファイルを Git 内部のテキストポインタに置き換え、ファイルの内容は GitHub.com や GitHub Enterprise などのリモートサーバに格納します。</p></blockquote><p>Git LFS を利用することで、GitHub からのチェックアウトする容量を抑え、必要箇所で git lfs pull することで回避できないかと考えました。</p><h2><span id="チェックアウトするリポジトリ側の対応">チェックアウトするリポジトリ側の対応</span></h2><p>対象のリポジトリに以下追加します。</p><p>.gitattributes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app&#x2F;assets&#x2F;images&#x2F;**.png filter&#x3D;lfs diff&#x3D;lfs merge&#x3D;lfs -text</span><br><span class="line">app&#x2F;assets&#x2F;images&#x2F;**.jpg filter&#x3D;lfs diff&#x3D;lfs merge&#x3D;lfs -text</span><br><span class="line">app&#x2F;assets&#x2F;images&#x2F;**.webp filter&#x3D;lfs diff&#x3D;lfs merge&#x3D;lfs -text</span><br></pre></td></tr></table></figure><p>容量の肥大化要因が Rails の app/assets/images/ 以下の画像だったので上記のように指定しています。</p><h2><span id="codepipeline-amp-codebuild-側の対応">CodePipeline &amp; CodeBuild 側の対応</span></h2><p>terraform ベースで説明しています。</p><ul><li>CodePipeline のソースアクションで full clone 設定にします。<ul><li>git メタデータを利用する必要がない場合は shallow clone の方がチェックアウトするファイルが少なくて済む</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_codepipeline&quot; &quot;deploy&quot; &#123;</span><br><span class="line">  ...</span><br><span class="line">  stage &#123;</span><br><span class="line">    name &#x3D; &quot;Source&quot;</span><br><span class="line">    action &#123;</span><br><span class="line">      configuration &#x3D; &#123;</span><br><span class="line">        OutputArtifactFormat &#x3D; &quot;CODEBUILD_CLONE_REF&quot; # Git LFS を利用すべく git メタデータを取得する為。</span><br></pre></td></tr></table></figure><ul><li>CodeBuild にアタッチしている IAM Role に権限追加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Git LFS 管理のオブジェクトを pull する為</span><br><span class="line">statement &#123;</span><br><span class="line">  actions   &#x3D; [&quot;codestar-connections:UseConnection&quot;]</span><br><span class="line">  resources &#x3D; [&quot;&lt;codestarconnections_arn&gt;&quot;]</span><br></pre></td></tr></table></figure><ul><li>buildspec で git-lfs コマンドをインストールし git-lfs pull しています。<ul><li>執筆事典最新の v3.2.0 を指定</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">phases:</span><br><span class="line">  pre_build:</span><br><span class="line">    commands:</span><br><span class="line">      # Git LFS 管理のオブジェクトを pull する</span><br><span class="line">      - wget https:&#x2F;&#x2F;github.com&#x2F;git-lfs&#x2F;git-lfs&#x2F;releases&#x2F;download&#x2F;v3.2.0&#x2F;git-lfs-linux-amd64-v3.2.0.tar.gz</span><br><span class="line">      - tar vzxf git-lfs-linux-amd64-v3.2.0.tar.gz</span><br><span class="line">      - cd git-lfs-3.2.0 &amp;&amp; .&#x2F;install.sh &amp;&amp; cd ..</span><br><span class="line">      - git remote set-url origin https:&#x2F;&#x2F;medpeer:$GITHUB_TOKEN@github.com&#x2F;medpeer-dev&#x2F;wac-rails</span><br><span class="line">      - git-lfs pull</span><br></pre></td></tr></table></figure><p>以上の対応でソースアクションのエラーを回避でき、無事デプロイできることを確認しました。</p><h2><span id="ちなみに">ちなみに</span></h2><p>CodePipeline がダメなら GitHub Actions ではどうか？という気持ちで試した所、<br><code>no left space on device</code> が発生してしまいました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A6%82%E8%A6%81&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%9A%E5%95%8F%E9%A1%8C%E7%99%BA%E7%94%9F%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-aws-%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%AB%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B%E3%81%9F&quot;&gt;まず問題発生について AWS サポートに問い合わせた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#git-large-file-storage-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B&quot;&gt;Git Large File Storage を利用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88%E3%81%99%E3%82%8B%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C&quot;&gt;チェックアウトするリポジトリ側の対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#codepipeline-codebuild-%E5%81%B4%E3%81%AE%E5%AF%BE%E5%BF%9C&quot;&gt;CodePipeline &amp;amp; CodeBuild 側の対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB&quot;&gt;ちなみに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;CodePipline のソースアクションで GitHub からチェックアウトする処理がエラーとなり、異常終了する事象が発生しました。&lt;/p&gt;
&lt;p&gt;チェックアウトする Rails プロジェクトの app/assets/images/ 以下のファイル容量が肥大化していたことが要因でした。&lt;/p&gt;
&lt;p&gt;上記を回避すべく Git LFS を導入した話です。&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>AWS コンソール上で CodeDeploy でデプロイ管理されている ECS Service をアップデートすると capacity provider が FARGATE になってしまう件</title>
    <link href="https://kenzo0107.github.io/2022/05/26/2022-05-27-update-ecs-service-on-aws-console/"/>
    <id>https://kenzo0107.github.io/2022/05/26/2022-05-27-update-ecs-service-on-aws-console/</id>
    <published>2022-05-26T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>capacity provider strategy で FARGATE_SPOT に weight = 1 で全振りしていた FARGATE がいます。</p><p><img src="https://i.imgur.com/rqRuh2G.png"></p><ul><li>FARGATE_SPOT weight = 1</li><li>FARGATE weight = 0</li></ul><h2><span id="aws-コンソール上で-ecs-service-をアップデートした際の問題">AWS コンソール上で ECS Service をアップデートした際の問題</span></h2><p><img src="https://i.imgur.com/4RoXEV6.png"></p><p>Configure service で FARGATE_SPOT weight = 1 に指定しています。</p><p>ちょっとした検証でタスク定義をちょこっと変えたものを AWS コンソール上でタスク更新だけしてデプロイしました。</p><p>すると…</p><p>capacity provider strategy の設定がなくなっている…<br><img src="https://i.imgur.com/8kt06gl.png"></p><h2><span id="何故こんなことが起きるのか">何故こんなことが起きるのか？</span></h2><p><img src="https://i.imgur.com/N16Wks5.png"></p><p>AWS コンソール上で ECS Service 更新ステップを進むと<br><code>Configure CodeDeploy Deployment</code> の Revision の <code>AppSpec</code> をクリックしてみると以下設定になっていました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: 1,</span><br><span class="line">    &quot;Resources&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;TargetService&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;AWS::ECS::Service&quot;,</span><br><span class="line">                &quot;Properties&quot;: &#123;</span><br><span class="line">                    &quot;TaskDefinition&quot;: &quot;&lt;タスク定義 ARN&gt;&quot;,</span><br><span class="line">                    &quot;LoadBalancerInfo&quot;: &#123;</span><br><span class="line">                        &quot;ContainerName&quot;: &quot;nginx&quot;,</span><br><span class="line">                        &quot;ContainerPort&quot;: 80</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;PlatformVersion&quot;: &quot;LATEST&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここで capacity provider strategy の設定がありません。</p><p>その影響で更新完了後、 capacity provider strategy の設定がなくなってしまいました。</p><p>terraform で capacity provider strategy を管理していると<br>terraform apply 実施すると ECS Service が意図せず再作成となりダウンタイムが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  # aws_ecs_service.app must be replaced</span><br><span class="line">-&#x2F;+ resource &quot;aws_ecs_service&quot; &quot;app&quot; &#123;</span><br><span class="line"></span><br><span class="line">      + capacity_provider_strategy &#123; # forces replacement</span><br><span class="line">          + capacity_provider &#x3D; &quot;FARGATE&quot;</span><br><span class="line">          + weight            &#x3D; 0</span><br><span class="line">        &#125;</span><br><span class="line">      + capacity_provider_strategy &#123; # forces replacement</span><br><span class="line">          + capacity_provider &#x3D; &quot;FARGATE_SPOT&quot;</span><br><span class="line">          + weight            &#x3D; 1</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2><span id="対策">対策</span></h2><p>CodeDeploy で管理されている ECS Service の更新は<br>aws-cli や CodeDeploy 経由でデプロイします。</p><p><code>aws deploy create-deployment</code> のオプションで全て対応しようとするとやや複雑になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aws deploy create-deployment \</span><br><span class="line">--application-name xxx \</span><br><span class="line">--deployment-group-name yyy \</span><br><span class="line">--revision &#39;&#123;&quot;revisionType&quot;: &quot;AppSpecContent&quot;, &quot;appSpecContent&quot;: &#123;&quot;content&quot;: &quot;&#123;\&quot;version\&quot;: 0.0, \&quot;Resources\&quot;: [&#123;\&quot;TargetService\&quot;: &#123;\&quot;Type\&quot;: \&quot;AWS::ECS::Service\&quot;, \&quot;Properties\&quot;: &#123;\&quot;TaskDefinition\&quot;: \&quot;&lt;タスク定義 ARN&gt;\&quot;, \&quot;LoadBalancerInfo\&quot;: &#123;\&quot;ContainerName\&quot;: \&quot;nginx\&quot;, \&quot;ContainerPort\&quot;: 80&#125;,\&quot;CapacityProviderStrategy\&quot;: [&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE_SPOT\&quot;,\&quot;Weight\&quot;:1&#125;,&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE\&quot;,\&quot;Weight\&quot;:0&#125;]&#125;&#125;&#125;]&#125;&quot;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>ファイルにまとめておくとコマンドがシンプル ♪<br>（content の定義が String なので、1 行にまとめて文字列として定義しており見づらさはある）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws deploy create-deployment --cli-input-json file:&#x2F;&#x2F;deployment.json</span><br></pre></td></tr></table></figure><p>deployment.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;applicationName&quot;: &quot;xxx&quot;,</span><br><span class="line">    &quot;deploymentGroupName&quot;: &quot;yyy&quot;,</span><br><span class="line">    &quot;revision&quot;: &#123;</span><br><span class="line">    &quot;revisionType&quot;: &quot;AppSpecContent&quot;,</span><br><span class="line">  &quot;appSpecContent&quot;: &#123;</span><br><span class="line">  &quot;content&quot;: &quot;&#123;\&quot;version\&quot;: 0.0, \&quot;Resources\&quot;: [&#123;\&quot;TargetService\&quot;: &#123;\&quot;Type\&quot;: \&quot;AWS::ECS::Service\&quot;, \&quot;Properties\&quot;: &#123;\&quot;TaskDefinition\&quot;: \&quot;&lt;タスク定義 ARN&gt;\&quot;, \&quot;LoadBalancerInfo\&quot;: &#123;\&quot;ContainerName\&quot;: \&quot;nginx\&quot;, \&quot;ContainerPort\&quot;: 80&#125;,\&quot;CapacityProviderStrategy\&quot;: [&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE_SPOT\&quot;,\&quot;Weight\&quot;:1&#125;,&#123;\&quot;Base\&quot;:0,\&quot;CapacityProvider\&quot;:\&quot;FARGATE\&quot;,\&quot;Weight\&quot;:0&#125;]&#125;&#125;&#125;]&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>appspec を明示的に指定することで capacity provider strategy を明示的に残すようにできることを確認しました。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;capacity provider strategy で FARGATE_SPOT に weight = 1 で全振りしていた FARGATE がいます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rqRuh2G.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="AWS" scheme="https://kenzo0107.github.io/categories/AWS/"/>
    
    
  </entry>
  
  <entry>
    <title>black「ImportError: cannot import name _unicodefun from click」 エラー対応</title>
    <link href="https://kenzo0107.github.io/2022/05/24/2022-05-25-black-fix-cannot-import-name-unicodefun-from-click/"/>
    <id>https://kenzo0107.github.io/2022/05/24/2022-05-25-black-fix-cannot-import-name-unicodefun-from-click/</id>
    <published>2022-05-24T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>python の自動整形ツール <a href="https://github.com/psf/black">black</a> で以下エラーが発生した為、その時の対応をまとめます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ black . --check --skip-string-normalization</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">ImportError: cannot import name &#39;_unicodefun&#39; from &#39;click&#39; ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以下参考に black 最新バージョン <a href="https://pypi.org/project/black/22.3.0/">22.3.0</a> にアップグレードすることで対応できたことを確認しました。</p><p>根本原因は black の内部モジュールが click (自身の環境ではバージョン 8.1.3) をインストールしており、そのバグによるものです。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;python の自動整形ツール &lt;a href=&quot;https://github.com/psf/black&quot;&gt;black&lt;/a&gt; で以下エラーが発生した為、その時の対応をまとめます。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Python" scheme="https://kenzo0107.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>k8s リソースをディスプレイに表示する</title>
    <link href="https://kenzo0107.github.io/2022/05/17/2022-05-18-k8s-monitoring-metric/"/>
    <id>https://kenzo0107.github.io/2022/05/17/2022-05-18-k8s-monitoring-metric/</id>
    <published>2022-05-17T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E6%89%8B%E9%A0%86">手順</a><ul><li><a href="#pod-metrics-server-%E8%BF%BD%E5%8A%A0">Pod metrics-server 追加</a></li><li><a href="#sampler-%E3%83%93%E3%83%AB%E3%83%89%E5%AE%9F%E8%A1%8C">sampler ビルド/実行</a></li></ul></li><li><a href="#%E3%81%84%E3%81%96-sampler-%E8%B5%B7%E5%8B%95">いざ sampler 起動</a></li><li><a href="#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">ちょっとハマりポイント</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- tocstop --></div></div><hr><p>おうち k8s 構築の続きです。</p><a href="https://kenzo0107.github.io/2022/05/05/2022-05-06-ouchi-kubernetes/#more" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://i.imgur.com/RgpOXr3.jpg"></div><div class="descriptions"><div class="og-title">おうち k8s 構築</div><div class="og-description">ToC     目的 購入したものリスト Raspberry Pi Imager で OS 書き込み cgroup の有効化 swap 無効化 IP 固定 Docker インストール Cgroup Driver が systemd を使用するように設定されていることを確認   k…</div></div></div></a><p>k8s cluster 各ノードの CPU, Memory を取得し、ディスプレイに表示します。</p><a id="more"></a><h2><span id="手順">手順</span></h2><h3><span id="pod-metrics-server-追加">Pod metrics-server 追加</span></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 2022.05.14 時点最新 commit abacf42babf4b4f623e992ff65761cd3902d0994 を参照しています。</span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://github.com/kubernetes-sigs/metrics-server/releases/download/metrics-server-helm-chart-3.8.2/components.yaml -O metrics-server-components.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim metrics-server-components.yaml</span></span><br><span class="line"></span><br><span class="line">// 以下編集</span><br><span class="line">     spec:</span><br><span class="line">       containers:</span><br><span class="line">       - args:</span><br><span class="line">         ...</span><br><span class="line">         - --kubelet-insecure-tls # 追加</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f metrics-server-components.yaml</span></span><br><span class="line"></span><br><span class="line">// metrics-server 関連 pod 起動確認</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pod metrics-server -n kube-system</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">// 以下のように表示されれば OK</span><br><span class="line">metrics-server-8bb87844c-jvfnz     1/1     Running   0          31s</span><br><span class="line"></span><br><span class="line">// k8s cluster 各ノードの CPU/Memory 表示</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl top node</span></span><br><span class="line"></span><br><span class="line">NAME       CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class="line">pikube01   466m         11%    1309Mi          35%      # master node</span><br><span class="line">pikube02   171m         4%     1615Mi          43%</span><br><span class="line">pikube03   576m         14%    1525Mi          40%</span><br></pre></td></tr></table></figure><h3><span id="sampler-ビルド実行">sampler ビルド/実行</span></h3><p>RPi の master node (pikube01) で以下作業を進めます。</p><p>RPi に Go をインストールする必要があります。以下参考まで</p><a href="https://kenzo0107.github.io/2022/05/14/2022-05-15-install-golang-on-raspberrypios/" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://kenzo0107.github.io/img/og_image.png"></div><div class="descriptions"><div class="og-title">RaspberryPI に Go をインストールする</div><div class="og-description">RPi に Go をインストールする手順です。2022.05.15 時点最新 1.18.2 をインストールします。 12345678wget https:&amp;#x2F;&amp;#x2F;golang.org&amp;#x2F;dl&amp;#x2F;go1.18.2.linux-armv6l.tar.g…</div></div></div></a><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">// see: https://github.com/greghesp/assistant-relay/issues/49</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libasound2-dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/sqshq/sampler</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> sampler</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> GOOS=linux GOARCH=arm GOARM=7 go build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mv sampler /usr/bin</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$HOME</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;<span class="string">'EOF'</span>&gt; sampler-config.yml</span></span><br><span class="line">gauges:</span><br><span class="line">  - title: pikube01 CPU</span><br><span class="line">    position: [[0, 0], [40, 6]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    color: 10</span><br><span class="line">    percent-only: true</span><br><span class="line">    cur:</span><br><span class="line">        sample: cat /tmp/kube-node | grep pikube01 | awk '&#123;print $3&#125;' | tr -d "%"</span><br><span class="line">    max:</span><br><span class="line">        sample: echo 100</span><br><span class="line">    min:</span><br><span class="line">        sample: echo 0</span><br><span class="line">  - title: pikube02 CPU</span><br><span class="line">    position: [[0, 7], [40, 6]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    color: 13</span><br><span class="line">    percent-only: true</span><br><span class="line">    cur:</span><br><span class="line">        sample: cat /tmp/kube-node | grep pikube02 | awk '&#123;print $3&#125;' | tr -d "%"</span><br><span class="line">    max:</span><br><span class="line">        sample: echo 100</span><br><span class="line">    min:</span><br><span class="line">        sample: echo 0</span><br><span class="line">  - title: pikube03 CPU</span><br><span class="line">    position: [[0, 13], [40, 6]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    color: 14</span><br><span class="line">    percent-only: true</span><br><span class="line">    cur:</span><br><span class="line">        sample: cat /tmp/kube-node | grep pikube03 | awk '&#123;print $3&#125;' | tr -d "%"</span><br><span class="line">    max:</span><br><span class="line">        sample: echo 100</span><br><span class="line">    min:</span><br><span class="line">        sample: echo 0</span><br><span class="line">  - title: pikube01 Mem</span><br><span class="line">    position: [[40, 0], [40, 6]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    color: 10</span><br><span class="line">    cur:</span><br><span class="line">        sample: cat /tmp/kube-node | grep pikube01 | awk '&#123;print $4&#125;' | tr -d "Mi"</span><br><span class="line">    max:</span><br><span class="line">        sample: echo 4096</span><br><span class="line">    min:</span><br><span class="line">        sample: echo 0</span><br><span class="line">  - title: pikube02 Mem</span><br><span class="line">    position: [[40, 7], [40, 6]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    color: 13</span><br><span class="line">    cur:</span><br><span class="line">        sample: cat /tmp/kube-node | grep pikube02 | awk '&#123;print $4&#125;' | tr -d "Mi"</span><br><span class="line">    max:</span><br><span class="line">        sample: echo 4096</span><br><span class="line">    min:</span><br><span class="line">        sample: echo 0</span><br><span class="line">  - title: pikube03 Mem</span><br><span class="line">    position: [[40, 13], [40, 6]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    color: 14</span><br><span class="line">    cur:</span><br><span class="line">        sample: cat /tmp/kube-node | grep pikube03 | awk '&#123;print $4&#125;' | tr -d "Mi"</span><br><span class="line">    max:</span><br><span class="line">        sample: echo 4096</span><br><span class="line">    min:</span><br><span class="line">        sample: echo 0</span><br><span class="line">textboxes:</span><br><span class="line">  - title: Status</span><br><span class="line">    position: [[0, 19], [80, 23]]</span><br><span class="line">    rate-ms: 30000</span><br><span class="line">    sample: &gt;-</span><br><span class="line">      kubectl top node &gt; /tmp/kube-node;</span><br><span class="line">      kubectl get all --all-namespaces &gt; /tmp/kube-all;</span><br><span class="line">      echo "Pod:$(cat /tmp/kube-all | grep pod/ | grep 'Running' | wc -l)"</span><br><span class="line">      "Service:$(cat /tmp/kube-all | grep service/ | wc -l)"</span><br><span class="line">      "Daemonset:$(cat /tmp/kube-all | grep daemonset.apps/ | wc -l)"</span><br><span class="line">      "Deployment:$(cat /tmp/kube-all | grep deployment.apps/ | wc -l)"</span><br><span class="line">      "Replicaset:$(cat /tmp/kube-all | grep replicaset.apps/ | wc -l)";</span><br><span class="line">      echo "";</span><br><span class="line">      echo "Service";</span><br><span class="line">      kubectl get svc --no-headers | grep -v ClusterIP | awk '&#123;print $1, $4, $5&#125;' | column -t;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2><span id="いざ-sampler-起動">いざ sampler 起動</span></h2><p>master node にキーボードを直接接続し、コンソール上で sampler を起動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sampler -c sampler-config.yml</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/UzQ3WhN.png"></p><p>かっこいい！</p><p><img src="https://i.imgur.com/2gWMfNJ.jpeg"></p><h2><span id="ちょっとハマりポイント">ちょっとハマりポイント</span></h2><div class="level article-meta">  <div class="level-left link-preview">    <div class="og-image">      <a href="https://amzn.to/3lb8Kn4" target="_blank">        <img src="https://m.media-amazon.com/images/I/71F5aoqrTEL._AC_SX679_.jpg" style="border: none;">      </a>    </div>    <div class="og-description">      <div>        <a href="https://amzn.to/3lb8Kn4" target="_blank">Quimat 3.5インチタッチスクリーン HDMIモニタTFT LCDディスプレイ</a>      </div>      <div>&nbsp;</div>      <div class="og-description">        <a class="button is-link" href="https://hb.afl.rakuten.co.jp/ichiba/27b40802.6c89c106.27b40803.63b26776/_RTLink33687?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fsakura-sakuraco%2Fsakura-sakuraco-45468%2F&link_type=picttext&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#f76956">楽天市場でチェック</a>        <a class="button is-link" href="https://amzn.to/3lb8Kn4" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#ff9900">Amazonでチェック</a>      </div>    </div>  </div></div><p>ディスプレイに 「QUIMAT 3.5 インチタッチスクリーン HDMI モニタ TFT LCD ディスプレイ」を使いましたが、<br>HDMI 接続で解像度の調整が難しく、手を焼きました。</p><p><code>/boot/config.txt</code> の修正をして再起動したら、 RPi が起動しなくなったり。。。</p><p>ssh もできなくなり、RPi にキーボード接続しても操作できなくなり、強制停止（電源引っこ抜き）し、 SD カードを別マシンで読み込んで <code>/boot/config.txt</code> を元に戻して事なきを得ました。</p><p>RPi4B の /boot/config.txt は <a href="https://www.raspberrypi.com/documentation/computers/config_txt.html">公式ドキュメント</a> を参考に最終的に以下のような編集をしました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以下追加</span><br><span class="line"># コンソールフレームバッファの幅</span><br><span class="line">framebuffer_width&#x3D;480</span><br><span class="line"># コンソールフレームバッファの高さ</span><br><span class="line">framebuffer_height&#x3D;320</span><br><span class="line"></span><br><span class="line"># 480x320 の解像度の設定がない為、カスタムCVTモードを定義する</span><br><span class="line"># hdmi_cvt&#x3D;&lt;width&gt; &lt;height&gt; &lt;framerate&gt; &lt;aspect&gt; &lt;margins&gt; &lt;interlace&gt; &lt;rb&gt;</span><br><span class="line">hdmi_cvt&#x3D;480 320 60 6 0 0 0</span><br><span class="line"></span><br><span class="line"># HDMI が接続されていない状態で RPi を起動するとコンポジットに切り替わるのを防ぐ</span><br><span class="line"># ディスプレイを HDMI に接続すると表示される様にする</span><br><span class="line">hdmi_force_hotplug&#x3D;1</span><br><span class="line"></span><br><span class="line"># DMT (Display Monitor Timings、通常モニターで使用される規格) に設定</span><br><span class="line"># 今回利用するディスプレイに対応</span><br><span class="line">hdmi_group&#x3D;2</span><br><span class="line"># hdmi_group&#x3D;2 にない hdmi_mode でカスタムモードを利用したい場合に設定する</span><br><span class="line">hdmi_mode&#x3D;87</span><br><span class="line"></span><br><span class="line"># 通常の HDMI モード</span><br><span class="line">hdmi_drive&#x3D;2</span><br><span class="line"></span><br><span class="line"># 以下コメントアウト: この設定があると解像度が変わってしまい、文字サイズが小さくなってしまう</span><br><span class="line">#dtoverlay&#x3D;vc4-kms-v3d</span><br><span class="line">#max_framebuffers&#x3D;2</span><br></pre></td></tr></table></figure><p>以上<br>参考になれば幸いです。</p><h2><span id="参考">参考</span></h2><p><a href="https://qiita.com/reireias/items/0d87de18f43f27a8ed9b">https://qiita.com/reireias/items/0d87de18f43f27a8ed9b</a></p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%89%8B%E9%A0%86&quot;&gt;手順&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pod-metrics-server-%E8%BF%BD%E5%8A%A0&quot;&gt;Pod metrics-server 追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sampler-%E3%83%93%E3%83%AB%E3%83%89%E5%AE%9F%E8%A1%8C&quot;&gt;sampler ビルド/実行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%84%E3%81%96-sampler-%E8%B5%B7%E5%8B%95&quot;&gt;いざ sampler 起動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88&quot;&gt;ちょっとハマりポイント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E8%80%83&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;おうち k8s 構築の続きです。&lt;/p&gt;
&lt;a href=&quot;https://kenzo0107.github.io/2022/05/05/2022-05-06-ouchi-kubernetes/#more&quot; class=&quot;link-preview&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://i.imgur.com/RgpOXr3.jpg&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;おうち k8s 構築&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;ToC     目的 購入したものリスト Raspberry Pi Imager で OS 書き込み cgroup の有効化 swap 無効化 IP 固定 Docker インストール Cgroup Driver が systemd を使用するように設定されていることを確認   k…&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;

&lt;p&gt;k8s cluster 各ノードの CPU, Memory を取得し、ディスプレイに表示します。&lt;/p&gt;</summary>
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>RaspberryPI に Go をインストールする</title>
    <link href="https://kenzo0107.github.io/2022/05/14/2022-05-15-install-golang-on-raspberrypios/"/>
    <id>https://kenzo0107.github.io/2022/05/14/2022-05-15-install-golang-on-raspberrypios/</id>
    <published>2022-05-14T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>RPi に Go をインストールする手順です。<br>2022.05.15 時点最新 1.18.2 をインストールします。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://golang.org/dl/go1.18.2.linux-armv6l.tar.gz</span><br><span class="line">sudo tar -C /usr/local -xzf go1.18.2.linux-armv6l.tar.gz</span><br><span class="line">echo 'export PATH=$PATH:/usr/local/go/bin' &gt;&gt; ~/.bashrc</span><br><span class="line">echo 'export PATH=$HOME/go/bin:$PATH' &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">// バージョン確認</span><br><span class="line">go version</span><br></pre></td></tr></table></figure><p>※ Raspberry PI OS Bullseye 2022.04.04 リリースで検証しました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RPi に Go をインストールする手順です。&lt;br&gt;2022.05.15 時点最新 1.18.2 をインストールします。&lt;/p&gt;
&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>kubeadm init で発生したエラー「unknown service runtime.v1alpha2.RuntimeService」対応</title>
    <link href="https://kenzo0107.github.io/2022/05/13/2022-05-14-fix-unknown-service-runtime.v1alpha2.runtimeservice/"/>
    <id>https://kenzo0107.github.io/2022/05/13/2022-05-14-fix-unknown-service-runtime.v1alpha2.runtimeservice/</id>
    <published>2022-05-13T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E7%B5%90%E8%AB%96">結論</a></li><li><a href="#%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83">検証環境</a></li></ul><!-- tocstop --></div></div><hr><p><code>kubeadm init</code> 時に以下エラーが発生した際の対処についてまとめます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level&#x3D;fatal msg&#x3D;&quot;getting status of runtime failed: rpc error: code &#x3D; Unimplemented desc &#x3D; unknown service runtime.v1alpha2.RuntimeService&quot;</span><br></pre></td></tr></table></figure><h2><span id="結論">結論</span></h2><p>以下実行することで解決します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;etc&#x2F;containerd&#x2F;config.toml</span><br><span class="line">sudo systemctl restart containerd</span><br></pre></td></tr></table></figure><p>以下参考</p><a href="https://github.com/containerd/containerd/issues/4581" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/db20922acff11c58a78ef5d8ab9e1a0a2f30bbf9e0218350ca6aa38e7c497f24/containerd/containerd/issues/4581"></div><div class="descriptions"><div class="og-title">Kubeadm unknown service runtime.v1alpha2.RuntimeService · Issue #4581 · containerd/containerd</div><div class="og-description">Problem Following Kubernetes official installation instruction for containerd and kubeadm init will fail with unknown service runtime.v1alph…</div></div></div></a><h2><span id="検証環境">検証環境</span></h2><ul><li>kubeadm 1.22.7-00</li><li>kubelet 1.22.7-00</li><li>kubectl 1.22.7-00</li></ul><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B5%9</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tfsec aws-vpc-add-description-to-security-group 対応</title>
    <link href="https://kenzo0107.github.io/2022/05/12/2022-05-13-fix-tfsec-aws-vpc-add-description-to-security-group/"/>
    <id>https://kenzo0107.github.io/2022/05/12/2022-05-13-fix-tfsec-aws-vpc-add-description-to-security-group/</id>
    <published>2022-05-12T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#aws-cli-%E3%81%A7%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE-description-%E6%9B%B4%E6%96%B0%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84">aws-cli でセキュリティグループの　 description 更新はできない</a></li><li><a href="#aws-%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E4%B8%8A%E3%81%A7%E3%82%82%E5%A4%89%E6%9B%B4%E3%81%AF%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84">AWS コンソール上でも変更はできない</a></li><li><a href="#%E3%81%8B%E3%81%8F%E3%81%AA%E3%82%8B%E4%B8%8A%E3%81%AF">かくなる上は</a></li></ul><!-- tocstop --></div></div><hr><p>terraform で AWS Security Group リソースは以下の場合、 <code>aws-vpc-add-description-to-security-group</code> ルールで違反が指摘されます。</p><ul><li><code>description</code> がない</li><li><code>description = &quot;Managed by Terraform&quot;</code></li></ul><p>description を変更すればルールを回避できますが、その際にセキュリティグループが再作成となります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  # aws_security_group.this must be replace</span><br><span class="line">-&#x2F;+ resource &quot;aws_security_group&quot; &quot;this&quot; &#123;</span><br></pre></td></tr></table></figure><p>tfsec:ignore:aws-vpc-add-description-to-security-group で暫定的に回避することは可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_security_group&quot; &quot;this&quot; &#123;</span><br><span class="line">  description &#x3D; &quot;Managed by Terraform&quot; # tfsec:ignore:aws-vpc-add-description-to-security-group 変更時に再作成となる為</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="aws-cli-でセキュリティグループの-description-更新はできない">aws-cli でセキュリティグループの　 description 更新はできない</span></h2><p>2022-05-13 時点、<br>aws-cli でセキュリティグループの description の更新コマンドはありませんでした。</p><p>※セキュリティグループルールの description 更新コマンドはあります。</p><p>時折、 terraform だと再作成になるが、 aws-cli であれば更新できるケースがありますが、セキュリティグループの description は無理でした。</p><h2><span id="aws-コンソール上でも変更はできない">AWS コンソール上でも変更はできない</span></h2><p>AWS コンソール上で変更ができませんでした。</p><h2><span id="かくなる上は">かくなる上は</span></h2><p>terraform で既存リソースのコピーを作成しアタッチし直すのが良さそうです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;aws_security_group&quot; &quot;this&quot; &#123;</span><br><span class="line">  description &#x3D; &quot;Managed by Terraform&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 別途作成する</span><br><span class="line">resource &quot;aws_security_group&quot; &quot;this_v2&quot; &#123;</span><br><span class="line">  description &#x3D; &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_lb&quot; &quot;app&quot; &#123;</span><br><span class="line">  name &#x3D; &quot;$&#123;local.prefix&#125;-app-lb&quot;</span><br><span class="line"></span><br><span class="line">  security_groups &#x3D; [</span><br><span class="line">    aws_security_group.this.id,</span><br><span class="line">    aws_security_group.this_v2.id, # 追加</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>AWS コンソールのセキュリティグループを選択し Actions &gt; <code>Copy to new security group</code> をクリックする手と同じです。</p><p>ただ、対応コストとリスクを鑑みると、優先順位が高くなく、<br>セキュリティグループルールの description の変更は可能なので、<br>そちらを適宜対応していくのが良いと感じました。</p><p>セキュリティグループリソース作成時に意識できる様にしていきたい所です。</p><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;&lt;span id=&quot;toc&quot;&gt;ToC&lt;/span&gt;&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#aws-cli-</summary>
      
    
    
    
    <category term="Terraform" scheme="https://kenzo0107.github.io/categories/Terraform/"/>
    
    
  </entry>
  
  <entry>
    <title>Raspberry PI OS で vim インストール</title>
    <link href="https://kenzo0107.github.io/2022/05/08/2022-05-09-install_vim_on_raspberrypi_os/"/>
    <id>https://kenzo0107.github.io/2022/05/08/2022-05-09-install_vim_on_raspberrypi_os/</id>
    <published>2022-05-08T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<p>備忘録です。</p><p>Raspberry PI OS (32-bit) Bullseye で vim インストールした際のメモです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove vim-common vim-tiny</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;備忘録です。&lt;/p&gt;
&lt;p&gt;Raspberry PI OS (32-bit) Bullseye で vim インストールした際のメモです。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>おうち k8s 構築</title>
    <link href="https://kenzo0107.github.io/2022/05/05/2022-05-06-ouchi-kubernetes/"/>
    <id>https://kenzo0107.github.io/2022/05/05/2022-05-06-ouchi-kubernetes/</id>
    <published>2022-05-05T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E7%9B%AE%E7%9A%84">目的</a></li><li><a href="#%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F%E3%82%82%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88">購入したものリスト</a></li><li><a href="#raspberry-pi-imager-%E3%81%A7-os-%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF">Raspberry Pi Imager で OS 書き込み</a></li><li><a href="#cgroup-%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">cgroup の有効化</a></li><li><a href="#swap-%E7%84%A1%E5%8A%B9%E5%8C%96">swap 無効化</a></li><li><a href="#ip-%E5%9B%BA%E5%AE%9A">IP 固定</a></li><li><a href="#docker-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">Docker インストール</a><ul><li><a href="#cgroup-driver-%E3%81%8C-systemd-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D">Cgroup Driver が systemd を使用するように設定されていることを確認</a></li></ul></li><li><a href="#kubeadm-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">kubeadm インストール</a><ul><li><a href="#iptables-%E3%81%8C%E3%83%96%E3%83%AA%E3%83%83%E3%82%B8%E3%82%92%E9%80%9A%E9%81%8E%E3%81%99%E3%82%8B%E3%83%88%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%92%E5%87%A6%E7%90%86%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">iptables がブリッジを通過するトラフィックを処理できるようにする</a></li><li><a href="#iptables-%E3%81%8C-nftables-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">iptables が nftables バックエンドを使用しないようにする</a></li><li><a href="#kubeadm-kubelet-kubectl-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">kubeadm、kubelet、kubectl のインストール</a></li></ul></li><li><a href="#kubernetes-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC%E6%A7%8B%E7%AF%89">Kubernetes クラスター構築</a></li><li><a href="#worker-%E3%83%8E%E3%83%BC%E3%83%89%E7%99%BB%E9%8C%B2">worker ノード登録</a><ul><li><a href="#token-%E3%81%AE%E6%9C%9F%E9%99%90%E3%81%8C%E5%88%87%E3%82%8C%E3%81%9F%E3%82%89">token の期限が切れたら</a></li><li><a href="#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%A7-worker-node-%E3%81%8C%E7%99%BB%E9%8C%B2%E3%81%95%E3%82%8C%E3%81%A6%E3%82%8B%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B">クラスタで worker node が登録されてるか確認する</a></li><li><a href="#label-%E4%BB%98%E3%81%91%E3%81%99%E3%82%8B">label 付けする</a></li></ul></li><li><a href="#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%A7-kubectl-%E3%81%A7%E6%93%8D%E4%BD%9C%E3%81%A7%E3%81%8D%E3%82%8B%E6%A7%98%E3%81%AB%E3%81%99%E3%82%8B">ローカルのマシンで kubectl で操作できる様にする</a></li><li><a href="#metal-lb-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">Metal LB インストール</a><ul><li><a href="#raspberry-pi-%E4%BB%A5%E5%A4%96%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88">Raspberry PI 以外のマシンからアクセスできない場合</a></li></ul></li><li><a href="#%E7%B7%8F%E8%A9%95">総評</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul><!-- tocstop --></div></div><hr><a id="more"></a><p>Raspberry PI で Kubernetes クラスタを構築しました。</p><p>会社の「テックサポート制度」により、 Raspberry PI がサポート対象となり、遺憾無くお金を使わせてもらうことができる様になりました。<br>その甲斐あって、兼ねてより家で k8s cluster を飼う、というエンジニア冥利に尽きる所作を味わいたくチャレンジさせていただきました。</p><p>普段は AWS で Fargate を利用するケースが多く、 kubernetes を利用するシーンがなく、興味もあり、学びを広げたい意図があります。</p><h2><span id="目的">目的</span></h2><p>Raspberry PI のようなベアメタル環境で OS をインストールし k8s 関連パッケージを構築し、構築に必要な大まかな流れを理解する、<br>です。</p><p>以下を実施していきます。</p><ol><li>Raspberry PI OS インストール</li><li>kubernetes cluster 構築</li><li>Metal LB 構築</li></ol><p>非常に学びとハマりポイントが多かったので、以下に記していきたいと思います。</p><h2><span id="購入したものリスト">購入したものリスト</span></h2><p>2022 年 4 月下旬、Raspberry PI 単体でなく、スターターキットでの取り扱いが多かったです。<br>スターターキットは単体に比べやや高くなりますが、その辺は<a href="https://medpeer.co.jp/recruit/">会社</a>のサポート制度の力を存分にお借りしました ♪</p><div class="level article-meta">  <div class="level-left link-preview">    <div class="og-image">      <a href="https://www.amazon.co.jp/CanaKit-Raspberry-%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88-%E3%82%AF%E3%83%AA%E3%82%A2%E3%82%B1%E3%83%BC%E3%82%B9%E4%BB%98%E3%81%8D-PI4-STR32EWF-C4-CLR/dp/B07YLY143F?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1O7RHSIN45Y49&keywords=Pi4+B+4GB+%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC+%E3%82%AD%E3%83%83%E3%83%88+7%E7%82%B9%E3%82%BB%E3%83%83%E3%83%88+V4+%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E6%95%99%E6%9D%90&qid=1651933444&sprefix=raspberry+pi+4b+%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88%2Caps%2C476&sr=8-27&linkCode=li2&tag=kenzo0107-22&linkId=f8b93f80255639d3b5cc614c2ec24ce2&language=ja_JP&ref_=as_li_ss_il" target="_blank">        <img src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07YLY143F&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=kenzo0107-22&language=ja_JP" style="border: none;">      </a>    </div>    <div class="og-description">      <div>        <a href="https://www.amazon.co.jp/CanaKit-Raspberry-%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88-%E3%82%AF%E3%83%AA%E3%82%A2%E3%82%B1%E3%83%BC%E3%82%B9%E4%BB%98%E3%81%8D-PI4-STR32EWF-C4-CLR/dp/B07YLY143F?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1O7RHSIN45Y49&keywords=Pi4+B+4GB+%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC+%E3%82%AD%E3%83%83%E3%83%88+7%E7%82%B9%E3%82%BB%E3%83%83%E3%83%88+V4+%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E6%95%99%E6%9D%90&qid=1651933444&sprefix=raspberry+pi+4b+%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88%2Caps%2C476&sr=8-27&linkCode=li2&tag=kenzo0107-22&linkId=f8b93f80255639d3b5cc614c2ec24ce2&language=ja_JP&ref_=as_li_ss_il" target="_blank">Raspberry PI 4B 4GB スターターキット</a>      </div>      <div>&nbsp;</div>      <div class="og-description">        <a class="button is-link" href="https://hb.afl.rakuten.co.jp/ichiba/23166659.8ed3e37c.2316665a.b61e268d/_RTLink33687?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fmcpjapan%2Fv_35027214434455%2F&link_type=hybrid_url&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#f76956">楽天市場でチェック</a>        <a class="button is-link" href="https://www.amazon.co.jp/CanaKit-Raspberry-%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88-%E3%82%AF%E3%83%AA%E3%82%A2%E3%82%B1%E3%83%BC%E3%82%B9%E4%BB%98%E3%81%8D-PI4-STR32EWF-C4-CLR/dp/B07YLY143F?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1O7RHSIN45Y49&keywords=Pi4+B+4GB+%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC+%E3%82%AD%E3%83%83%E3%83%88+7%E7%82%B9%E3%82%BB%E3%83%83%E3%83%88+V4+%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E6%95%99%E6%9D%90&qid=1651933444&sprefix=raspberry+pi+4b+%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88%2Caps%2C476&sr=8-27&linkCode=li2&tag=kenzo0107-22&linkId=f8b93f80255639d3b5cc614c2ec24ce2&language=ja_JP&ref_=as_li_ss_il" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#ff9900">Amazonでチェック</a>      </div>    </div>  </div></div><div class="level article-meta">  <div class="level-left link-preview">    <div class="og-image">      <a href="https://www.amazon.co.jp/gp/product/B08143HR4H?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=c770488d0f88935f656f83a671841bca&language=ja_JP&ref_=as_li_ss_il" target="_blank">        <img src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B08143HR4H&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=kenzo0107-22&language=ja_JP" style="border: none;">      </a>    </div>    <div class="og-description">      <div>        <a href="https://www.amazon.co.jp/gp/product/B08143HR4H?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=c770488d0f88935f656f83a671841bca&language=ja_JP&ref_=as_li_ss_il" target="_blank">LAN ケーブル CAT6 フラット ホワイト 5本 0.15m</a>      </div>      <div>&nbsp;</div>      <div class="og-description">        <a class="button is-link" href="https://hb.afl.rakuten.co.jp/ichiba/2760f4f3.6a3c6189.2760f4f4.89ee5ab7/_RTLink33687?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fshop-gimigimi%2F4946718646184%2F&link_type=hybrid_url&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#f76956">楽天市場でチェック</a>        <a class="button is-link" href="https://www.amazon.co.jp/gp/product/B08143HR4H?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=c770488d0f88935f656f83a671841bca&language=ja_JP&ref_=as_li_ss_il" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#ff9900">Amazonでチェック</a>      </div>    </div>  </div></div><div class="level article-meta">  <div class="level-left link-preview">    <div class="og-image">      <a href="https://www.amazon.co.jp/gp/product/B017SFTMFS?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=17398f672442f8b5d32953da671abce1&language=ja_JP&ref_=as_li_ss_il" target="_blank">        <img src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B017SFTMFS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=kenzo0107-22&language=ja_JP" style="border: none;">      </a>    </div>    <div class="og-description">      <div>        <a href="https://www.amazon.co.jp/gp/product/B017SFTMFS?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=17398f672442f8b5d32953da671abce1&language=ja_JP&ref_=as_li_ss_il" target="_blank">エレコム スイッチングハブ ギガビット 5ポート</a>      </div>      <div>&nbsp;</div>      <div class="og-description">        <a class="button is-link" href="https://hb.afl.rakuten.co.jp/ichiba/2760f8ce.30eb2ea8.2760f8cf.f9e60d37/_RTLink33687?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fthinkrich%2Fzzr00464%2F&link_type=hybrid_url&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#f76956">楽天市場でチェック</a>        <a class="button is-link" href="https://www.amazon.co.jp/gp/product/B017SFTMFS?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=17398f672442f8b5d32953da671abce1&language=ja_JP&ref_=as_li_ss_il" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#ff9900">Amazonでチェック</a>      </div>    </div>  </div></div><div class="level article-meta">  <div class="level-left link-preview">    <div class="og-image">      <a href="https://www.amazon.co.jp/gp/product/B07TJZ2HDG?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=ffd6f2b502cb234e395ba1195bdb821c&language=ja_JP&ref_=as_li_ss_il" target="_blank">        <img src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07TJZ2HDG&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=kenzo0107-22&language=ja_JP" style="border: none;">      </a>    </div>    <div class="og-description">      <div>        <a href="https://www.amazon.co.jp/gp/product/B07TJZ2HDG?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=ffd6f2b502cb234e395ba1195bdb821c&language=ja_JP&ref_=as_li_ss_il" target="_blank">GeeekPi Raspberry Pi4クラスターケース冷却ファンとRaspberryPi4ヒートシンク付きRaspberryPi4ケースアクリルケース</a>      </div>      <div>&nbsp;</div>      <div class="og-description">        <a class="button is-link" href="https://hb.afl.rakuten.co.jp/ichiba/2760fa3a.b36cda69.2760fa3b.5565ad0e/_RTLink33687?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Falmeria%2F39044535755%2F&link_type=hybrid_url&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#f76956">楽天市場でチェック</a>        <a class="button is-link" href="https://www.amazon.co.jp/gp/product/B07TJZ2HDG?ie=UTF8&psc=1&linkCode=li2&tag=kenzo0107-22&linkId=ffd6f2b502cb234e395ba1195bdb821c&language=ja_JP&ref_=as_li_ss_il" target="_blank" rel="nofollow" referrerpolicy="no-referrer-when-downgrade" style="background:#ff9900">Amazonでチェック</a>      </div>    </div>  </div></div><h2><span id="raspberry-pi-imager-で-os-書き込み">Raspberry Pi Imager で OS 書き込み</span></h2><p><img src="https://i.imgur.com/Ibrwfyu.png"></p><p>2022-04-26 時点で最新の Raspberry PI OS Lite (32-bit) Bullseye を選択しました。<br>今回の要件に GUI は不要で極力軽めのイメージを利用したかった為です。</p><p><img src="https://i.imgur.com/Crtub61.png"></p><p>設定でホスト名や Wifi の設定をしておくと後が楽です。</p><p>SD カードにイメージを書き込みし、 Raspberry PI に差し込み、起動します。</p><h2><span id="cgroup-の有効化">cgroup の有効化</span></h2><p>Docker を利用すべく、 cgroup を有効化します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano &#x2F;boot&#x2F;cmdline.txt</span><br><span class="line"></span><br><span class="line">cgroup_enable&#x3D;cpuset cgroup_enable&#x3D;memory cgroup_memory&#x3D;1</span><br></pre></td></tr></table></figure><p><code>nano</code> or <code>vi</code> が入ってたのですが、 <code>vim</code> 使いたい場合は<a href="https://kenzo0107.github.io/2022/05/08/2022-05-09-install_vim_on_raspberrypi_os/">こちら</a> 参考</p><p>cgroup への理解は以下参考になりました。</p><a href="https://valinux.hatenablog.com/entry/20210114" class="link-preview"><div class="link-area"><div class="og-image"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/v/valinux/20210113/20210113115814.png"></div><div class="descriptions"><div class="og-title">Kubernetes で cgroup がどう利用されているか - VA Linux エンジニアブログ  </div><div class="og-description">cgroup とは、Linux カーネルの機能の1つであり、プロセスやスレッドが利用するリソースの制限や分離を行うための機能で、Linux コンテナの根幹を成す技術の1つでもあります。本記事では、Kubernetes のいくつかの機能を例に挙げ、cgroup がどう利用されている…</div></div></div></a><h2><span id="swap-無効化">swap 無効化</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo swapoff --all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl stop dphys-swapfile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">disable</span> dphys-swapfile</span></span><br></pre></td></tr></table></figure><p>swap を無効化する理由は公式ドキュメントで言及されています。</p><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/_print/#%E5%A7%8B%E3%82%81%E3%82%8B%E5%89%8D%E3%81%AB">https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/_print/#始める前に</a></p><blockquote><p>Swapがオフであること。kubeletが正常に動作するためにはswapは必ずオフでなければなりません。</p></blockquote><h2><span id="ip-固定">IP 固定</span></h2><p>ルーターで IP 固定しておくと再起動時に変更なく楽です。</p><p>ルーターでなく、 Raspberry PI 側で <code>/etc/dhcpcd.conf</code> を編集し固定する方法は以下参考になります。<br><a href="https://www.fabshop.jp/raspberry-pi-static-ip/">Raspberry Pi の IP アドレスを固定にするには？</a></p><p>ここで一旦 reboot し諸々を反映しておきます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo reboot</span></span><br></pre></td></tr></table></figure><h2><span id="docker-インストール">Docker インストール</span></h2><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/container-runtimes/">CRI のインストール</a> を参考にインストールしました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// パッケージのリポジトリ情報更新時に必要な公開鍵を取得。ないと GPG error が発生</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span></span><br><span class="line"></span><br><span class="line">// armhf debian 用の docker 安定版のリポジトリを登録</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> \</span></span><br><span class="line">  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \</span><br><span class="line"><span class="meta">  $</span><span class="bash">(lsb_release -cs) stable<span class="string">" | sudo tee /etc/apt/sources.list.d/docker.list</span></span></span><br><span class="line"></span><br><span class="line">// リポジトリ更新</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"></span><br><span class="line">// docker インストール</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get -y install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker</span></span><br><span class="line"></span><br><span class="line">// pi ユーザを docker グループに追加し docker を操作できる様にする</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod pi -aG docker</span></span><br></pre></td></tr></table></figure><h3><span id="cgroup-driver-が-systemd-を使用するように設定されていることを確認">Cgroup Driver が systemd を使用するように設定されていることを確認</span></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker info | grep Cgroup</span></span><br><span class="line"></span><br><span class="line"> Cgroup Driver: systemd</span><br><span class="line"> Cgroup Version: 2</span><br></pre></td></tr></table></figure><p>以下<a href="https://kubernetes.io/ja/docs/setup/production-environment/container-runtimes/#cgroup%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E3%83%BC">公式</a>で systemd を使用を推奨しています。</p><blockquote><p>コンテナランタイムと kubelet が cgroup ドライバーとして systemd を使用するように設定を変更することでシステムは安定します。 以下の Docker 設定の native.cgroupdriver=systemd オプションに注意してください。</p></blockquote><h2><span id="kubeadm-インストール">kubeadm インストール</span></h2><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">公式</a>に沿って以下実行していきます。</p><h3><span id="iptables-がブリッジを通過するトラフィックを処理できるようにする">iptables がブリッジを通過するトラフィックを処理できるようにする</span></h3><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#iptables%E3%81%8C%E3%83%96%E3%83%AA%E3%83%83%E3%82%B8%E3%82%92%E9%80%9A%E9%81%8E%E3%81%99%E3%82%8B%E3%83%88%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%92%E5%87%A6%E7%90%86%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">公式ドキュメント参考</a></p><p><code>br_netfilter</code> がロードされているか確認する</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsmod | grep br_netfilter</span></span><br><span class="line"></span><br><span class="line">br_netfilter           32768  0</span><br><span class="line">bridge                180224  1 br_netfilter</span><br><span class="line">ipv6                  520192  28 br_netfilter,bridge</span><br></pre></td></tr></table></figure><p>何も表示されない場合、 <code>br_netfilter</code> がロードされていない為、以下実行し明示的にロードしておきます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> modprobe br_netfilter</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl --system</span></span><br></pre></td></tr></table></figure><h3><span id="iptables-が-nftables-バックエンドを使用しないようにする">iptables が nftables バックエンドを使用しないようにする</span></h3><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#iptables%E3%81%8Cnftables%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">公式</a></p><blockquote><p>nftables バックエンドは現在の kubeadm パッケージと互換性がありません。(ファイアウォールルールが重複し、kube-proxy を破壊するためです。)</p></blockquote><p>公式の説明にある通り、 iptables が nftables を使うことで kubernetes が正常に動作しないことがある為、 iptables をレガシーバージョンに切り替えます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// レガシーバイナリがインストールされていることを確認してください</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install -y iptables arptables ebtables</span></span><br><span class="line"></span><br><span class="line">// レガシーバージョンに切り替えてください。</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo update-alternatives --<span class="built_in">set</span> iptables /usr/sbin/iptables-legacy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo update-alternatives --<span class="built_in">set</span> ip6tables /usr/sbin/ip6tables-legacy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo update-alternatives --<span class="built_in">set</span> arptables /usr/sbin/arptables-legacy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo update-alternatives --<span class="built_in">set</span> ebtables /usr/sbin/ebtables-legacy</span></span><br></pre></td></tr></table></figure><p>参考: <a href="https://knowledge.sakura.ad.jp/22636/">nftables 入門</a></p><h3><span id="kubeadm-kubelet-kubectl-のインストール">kubeadm、kubelet、kubectl のインストール</span></h3><p>いよいよ kubeadm インストールです。</p><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#kubeadm-kubelet-kubectl%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">公式</a></p><p>2022/04/30 時点の最新バージョン 1.23.6 では kubelet が起動失敗するエラーが発生した為、<br>バージョンは 1.22 系を選択します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line">deb https://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"></span><br><span class="line">// 1.22 系をインストール</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install -y kubelet=1.22.7-00 kubeadm=1.22.7-00 kubectl=1.22.7-00</span></span><br><span class="line"></span><br><span class="line">// バージョン固定</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-mark hold kubelet kubeadm kubectl</span></span><br></pre></td></tr></table></figure><h2><span id="kubernetes-クラスター構築">Kubernetes クラスター構築</span></h2><p><a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">公式</a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// flannel をクラスター初期化処理を実装すべく 10.244.0.0/16 を指定している</span><br><span class="line">// see: https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo kubeadm init --pod-network-cidr=10.244.0.0/16</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">// 最後の1行をコピーしておく</span><br><span class="line">kubeadm join &lt;master node ip&gt;:6443 --token yyyy \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:xxxxxxxx</span><br><span class="line"></span><br><span class="line">// 上記作成時に出力されるクラスター開始時の設定</span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p <span class="variable">$HOME</span>/.kube</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span></span><br><span class="line"></span><br><span class="line">// flannel 構築</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line"></span><br><span class="line">// 起動してく様子がわかる♪</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pod --all-namespaces</span></span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                               READY   STATUS     RESTARTS   AGE</span><br><span class="line">kube-system   coredns-78fcd69978-sv52p           0/1     Pending    0          111s</span><br><span class="line">kube-system   coredns-78fcd69978-t5glm           0/1     Pending    0          111s</span><br><span class="line">kube-system   etcd-pikube01                      1/1     Running    0          2m</span><br><span class="line">kube-system   kube-apiserver-pikube01            1/1     Running    0          2m4s</span><br><span class="line">kube-system   kube-controller-manager-pikube01   1/1     Running    0          2m</span><br><span class="line">kube-system   kube-flannel-ds-w2bqt              0/1     Init:0/2   0          9s</span><br><span class="line">kube-system   kube-proxy-kpm8w                   1/1     Running    0          111s</span><br><span class="line">kube-system   kube-scheduler-pikube01            1/1     Running    0          2m</span><br></pre></td></tr></table></figure><p><a href="https://github.com/flannel-io/flannel#readme">flannel</a> はコンテナの相互疎通等ネットワーク構築に有用で k8s との相性がよいです。</p><h2><span id="worker-ノード登録">worker ノード登録</span></h2><p>master node でクラスター作成時に出力されたコマンドを実行します。<br>以下 worker node で実施します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo kubeadm join &lt;master node ip&gt;:6443 --token xxx \</span></span><br><span class="line">        --discovery-token-ca-cert-hash sha256:yyy</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>token は期限付きなのでご注意ください。</p><p>token の期限は master node で確認できます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">master$</span><span class="bash"> kubeadm token list</span></span><br><span class="line"></span><br><span class="line">TOKEN                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line">xxx   23h         2022-04-28T13:12:39Z   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token</span><br></pre></td></tr></table></figure><h3><span id="token-の期限が切れたら">token の期限が切れたら</span></h3><p>master node で再発行してください。<br>トークンを再発行し、且つ、worker node で <code>kubeadm join</code> する為のコマンドを出力してくれます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">master$</span><span class="bash"> kubeadm token create --<span class="built_in">print</span>-join-command</span></span><br></pre></td></tr></table></figure><h3><span id="クラスタで-worker-node-が登録されてるか確認する">クラスタで worker node が登録されてるか確認する</span></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">master$</span><span class="bash"> kubectl get nodes</span></span><br><span class="line"></span><br><span class="line">NAME       STATUS     ROLES                  AGE   VERSION</span><br><span class="line">pikube01   Ready      control-plane,master   32h   v1.22.7</span><br><span class="line">pikube02   Ready      &lt;none&gt;                 32m   v1.22.7</span><br><span class="line">pikube03   NotReady   &lt;none&gt;                 18s   v1.22.7</span><br></pre></td></tr></table></figure><h3><span id="label-付けする">label 付けする</span></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">master$</span><span class="bash"> kubectl label node pikube02  node-role.kubernetes.io/worker=</span></span><br><span class="line"><span class="meta">master$</span><span class="bash"> kubectl label node pikube03  node-role.kubernetes.io/worker=</span></span><br></pre></td></tr></table></figure><p>再度 node 一覧を表示すると ROLES にラベル付けされているのが確認できます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get nodes</span></span><br><span class="line"></span><br><span class="line">NAME       STATUS   ROLES                  AGE    VERSION</span><br><span class="line">pikube01   Ready    control-plane,master   32h    v1.22.7</span><br><span class="line">pikube02   Ready    worker                 39m    v1.22.7</span><br><span class="line">pikube03   Ready    worker                 7m8s   v1.22.7</span><br></pre></td></tr></table></figure><h2><span id="ローカルのマシンで-kubectl-で操作できる様にする">ローカルのマシンで kubectl で操作できる様にする</span></h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 出力結果をコピーする</span><br><span class="line"><span class="meta">master$</span><span class="bash"> kubectl config view --raw</span></span><br><span class="line"></span><br><span class="line"><span class="meta">macOS$</span><span class="bash"> vi ~/.kube/config</span></span><br><span class="line">// 上記コピーを貼り付け保存</span><br><span class="line"></span><br><span class="line"><span class="meta">macOS$</span><span class="bash"> kubectl get nodes</span></span><br></pre></td></tr></table></figure><h2><span id="metal-lb-インストール">Metal LB インストール</span></h2><p>参考:</p><ul><li><a href="https://blog.framinal.life/entry/2020/04/16/022042">【手順あり】MetalLB の使い方から動きまで解説します</a></li><li><a href="https://metallb.universe.tf/installation/">MetalLB &gt; Installation</a></li><li><a href="https://levelup.gitconnected.com/step-by-step-slow-guide-kubernetes-cluster-on-raspberry-pi-4b-part-3-899fc270600e">Step by Step slow guide — Kubernetes Cluster on Raspberry Pi 4B — Part 3</a></li></ul><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 全インターフェースで IPv4 パケットの転送が有効化する</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl net.ipv4.conf.all.forwarding=1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo iptables -P FORWARD ACCEPT</span></span><br></pre></td></tr></table></figure><p><a href="https://metallb.universe.tf/installation/">MetalLB &gt; Installation</a> にある設定通りに進めます。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml</span></span><br><span class="line"></span><br><span class="line">// metallb 関連の pod の起動確認</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get -n metallb-system pods</span></span><br><span class="line"></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">controller-66445f859d-qg8cz   1/1     Running   0          30s</span><br><span class="line">speaker-bzzzc                 1/1     Running   0          30s</span><br><span class="line">speaker-vbhdf                 1/1     Running   0          30s</span><br><span class="line">speaker-vslj8                 1/1     Running   0          30s</span><br></pre></td></tr></table></figure><p>addresses: <code>192.168.11.200-192.168.11.220</code> は DHCP で取得可能なレンジを指定します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// metallb を layer2 モードで起動</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;EOF&gt; metallb-config.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  namespace: metallb-system</span><br><span class="line">  name: config</span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    address-pools:</span><br><span class="line">      - name: default</span><br><span class="line">        protocol: layer2</span><br><span class="line">        addresses:</span><br><span class="line">          - 192.168.11.200-192.168.11.220</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f metallb-config.yaml</span></span><br></pre></td></tr></table></figure><p>nginx を <code>type: LoadBalancer</code> でデプロイし、 metallb が IP を割り当てていることを確認します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;EOF&gt; nginx.deployment.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f nginx.deployment.yml</span></span><br></pre></td></tr></table></figure><p>割り当てられた IP が <code>192.168.11.200</code> となっており、外部からアクセスできることを確認します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get svc</span></span><br><span class="line"></span><br><span class="line">NAME            TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)        AGE</span><br><span class="line">kubernetes      ClusterIP      10.96.0.1      &lt;none&gt;           443/TCP        148m</span><br><span class="line">nginx-service   LoadBalancer   10.109.50.62   192.168.11.200   80:31270/TCP   57m</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl 192.168.11.200</span></span><br><span class="line"></span><br><span class="line">// Welcome to nginx! が表示される</span><br></pre></td></tr></table></figure><h3><span id="raspberry-pi-以外のマシンからアクセスできない場合">Raspberry PI 以外のマシンからアクセスできない場合</span></h3><p>自身の環境で<br>Raspberry PI の設定をしている MacOS から <code>EXTERNAL-IP</code> に nginx 起動直後はアクセスできましたが、<br>数分後、アクセスできなくなる事象が発生しました。</p><p>以下参考に解決しました。</p><p>参考: <a href="https://stackoverflow.com/questions/60796696/loadbalancer-using-metallb-on-bare-metal-rpi-cluster-not-working-after-installat">LoadBalancer using Metallb on bare metal RPI cluster not working after installation</a></p><p>MetalLB layer2 モードは、プロミスキャスモードが有効でない限り、ブロードキャストパケットを受信しません。<br>そのため、以下ブロードキャストパケットを受信できる様にすることで<br>macOS –&gt; metalLB の疎通が確認できました。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ifconfig wlan0 promisc</span></span><br></pre></td></tr></table></figure><p>promisc: “promiscuous” で「見境のない」という意味で全ての通信を読み込むモードにする、という意味です。</p><p>サーバ再起動で消えてしまう設定なので crontab に設定しておくと良い。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo crontab -e</span></span><br><span class="line"></span><br><span class="line">// 以下最終行に追記</span><br><span class="line">@reboot sudo ifconfig wlan0 promisc</span><br></pre></td></tr></table></figure><h2><span id="総評">総評</span></h2><p>ハマりポイントは以下でした。</p><ul><li>kubeadm, kubelet が最新 1.23 系で動作せず<ul><li>マイナーバージョン単位でダウングレードし対応</li></ul></li><li>MetalLB の吐き出す External IP に接続できなかった<ul><li>プロミスキャスモードを有効化することで対応</li></ul></li></ul><p>今後は以下に焦点を当てつつ、実際にサービスを作っていきます ♪</p><ul><li>CI/CD</li><li>監視</li></ul><p>以上<br>参考になれば幸いです。</p><h2><span id="参考">参考</span></h2><p><a href="https://qiita.com/reireias/items/0d87de18f43f27a8ed9b">https://qiita.com/reireias/items/0d87de18f43f27a8ed9b</a></p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%9B%AE%E7%9A%84&quot;&gt;目的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F%E3%82%82%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88&quot;&gt;購入したものリスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#raspberry-pi-imager-%E3%81%A7-os-%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF&quot;&gt;Raspberry Pi Imager で OS 書き込み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cgroup-%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96&quot;&gt;cgroup の有効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#swap-%E7%84%A1%E5%8A%B9%E5%8C%96&quot;&gt;swap 無効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ip-%E5%9B%BA%E5%AE%9A&quot;&gt;IP 固定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#docker-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&quot;&gt;Docker インストール&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cgroup-driver-%E3%81%8C-systemd-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D&quot;&gt;Cgroup Driver が systemd を使用するように設定されていることを確認&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kubeadm-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&quot;&gt;kubeadm インストール&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#iptables-%E3%81%8C%E3%83%96%E3%83%AA%E3%83%83%E3%82%B8%E3%82%92%E9%80%9A%E9%81%8E%E3%81%99%E3%82%8B%E3%83%88%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%92%E5%87%A6%E7%90%86%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B&quot;&gt;iptables がブリッジを通過するトラフィックを処理できるようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#iptables-%E3%81%8C-nftables-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B&quot;&gt;iptables が nftables バックエンドを使用しないようにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kubeadm-kubelet-kubectl-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&quot;&gt;kubeadm、kubelet、kubectl のインストール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kubernetes-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC%E6%A7%8B%E7%AF%89&quot;&gt;Kubernetes クラスター構築&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#worker-%E3%83%8E%E3%83%BC%E3%83%89%E7%99%BB%E9%8C%B2&quot;&gt;worker ノード登録&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#token-%E3%81%AE%E6%9C%9F%E9%99%90%E3%81%8C%E5%88%87%E3%82%8C%E3%81%9F%E3%82%89&quot;&gt;token の期限が切れたら&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%A7-worker-node-%E3%81%8C%E7%99%BB%E9%8C%B2%E3%81%95%E3%82%8C%E3%81%A6%E3%82%8B%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B&quot;&gt;クラスタで worker node が登録されてるか確認する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#label-%E4%BB%98%E3%81%91%E3%81%99%E3%82%8B&quot;&gt;label 付けする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%A7-kubectl-%E3%81%A7%E6%93%8D%E4%BD%9C%E3%81%A7%E3%81%8D%E3%82%8B%E6%A7%98%E3%81%AB%E3%81%99%E3%82%8B&quot;&gt;ローカルのマシンで kubectl で操作できる様にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#metal-lb-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&quot;&gt;Metal LB インストール&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#raspberry-pi-%E4%BB%A5%E5%A4%96%E3%81%AE%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88&quot;&gt;Raspberry PI 以外のマシンからアクセスできない場合&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B7%8F%E8%A9%95&quot;&gt;総評&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E8%80%83&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;</summary>
    
    
    
    <category term="RaspberryPI" scheme="https://kenzo0107.github.io/categories/RaspberryPI/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Actions で特定ブランチが削除された場合に実行する</title>
    <link href="https://kenzo0107.github.io/2022/04/05/2022-04-06-github-actions-delete-event/"/>
    <id>https://kenzo0107.github.io/2022/04/05/2022-04-06-github-actions-delete-event/</id>
    <published>2022-04-05T15:00:00.000Z</published>
    <updated>2022-11-02T14:46:30.058Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><div class="toc-content"><h3 class="menu-label"><span id="toc">ToC</span></h3><!-- toc --><ul><li><a href="#%E7%B5%90%E8%AB%96">結論</a><ul><li><a href="#on-delete-%E3%81%A8-if-%E3%81%A7%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%90%8D%E6%8C%87%E5%AE%9A">on: delete と if でブランチ名指定</a></li><li><a href="#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AB-push-%E3%81%97%E3%81%A6%E5%88%9D%E3%82%81%E3%81%A6-ondelete-%E3%81%AF%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B">デフォルトブランチに push して初めて on.delete は利用できる</a></li></ul></li><li><a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ</a></li></ul><!-- tocstop --></div></div><hr><p>GitHub Actions で特定ブランチが削除された場合にトリガーし実行する設定を試してみたのでまとめます。</p><p>以下設定サンプルです。<br><a href="https://github.com/kenzo0107/tutorial-delete-event-on-github-actions/blob/develop/.github/workflows/delete.yml">https://github.com/kenzo0107/tutorial-delete-event-on-github-actions/blob/develop/.github/workflows/delete.yml</a></p><a id="more"></a><h2><span id="結論">結論</span></h2><p>以下のような設定で実装しました。</p><ul><li>.github/workflows/delete.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">delete</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">run:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">(github.event.ref_type</span> <span class="string">==</span> <span class="string">'branch'</span> <span class="string">&amp;&amp;</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'tmp/'</span><span class="string">))</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">"delete event $<span class="template-variable">&#123;&#123; github.event.ref &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>以下ポイントをまとめます。</p><h3><span id="on-delete-と-if-でブランチ名指定">on: delete と if でブランチ名指定</span></h3><p>ブランチやタグが削除された際にトリガーされます。</p><p><code>on.delete</code> は 以下 <code>on.push</code> の様に <strong>branches によるブランチのフィルターは現状利用できません。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tmp/**</span></span><br></pre></td></tr></table></figure><p>その為、 <code>on.delete</code> で削除されたものが <code>branch</code> であり、且つ、<br>その branch 名が <code>tmp/</code> で始まる (ex. tmp/dummy) 場合のみ以下実行される設定としています。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">run:</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">(github.event.ref_type</span> <span class="string">==</span> <span class="string">'branch'</span> <span class="string">&amp;&amp;</span> <span class="string">startsWith(github.event.ref,</span> <span class="string">'tmp/'</span><span class="string">))</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>上記設定の為、毎回ブランチ削除時 (merge して削除等）に delete トリガーが実行されますが、<br>実質 1 秒程度で停止されました。</p><p><img src="https://i.imgur.com/3Kbhcml.png"></p><p>ちりも積もれば…となるのでこれを避けたい場合は GitHub の Webhook で Lambda の無料枠使えれば…<br>という感じで根本的な対策がないという印象です。</p><p><code>on.delete</code> に branches フィルタ希望です（切に）</p><h3><span id="デフォルトブランチに-push-して初めて-ondelete-は利用できる">デフォルトブランチに push して初めて on.delete は利用できる</span></h3><p><code>on.push</code> は任意のブランチで初めて push した場合でもトリガーできます。</p><p><code>on.delete</code> はデフォルトブランチに push して初めて利用できます。<br>なかなかトリガーされないなーと焦ってたら公式ドキュメントにちゃんと載ってました。</p><p><a href="https://docs.github.com/ja/actions/using-workflows/events-that-trigger-workflows#delete">https://docs.github.com/ja/actions/using-workflows/events-that-trigger-workflows#delete</a></p><blockquote><p>ノート: このイベントは、ワークフローファイルがデフォルトブランチにある場合にのみワークフローの実行をトリガーします。</p></blockquote><h2><span id="まとめ">まとめ</span></h2><ul><li><code>on.delete</code> では branches フィルターが利用できない</li><li><code>on.delete</code> はデフォルトブランチに利用するワークフローファイルがないとトリガーしない</li></ul><p>以上<br>参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;toc&quot;&gt;
&lt;div class=&quot;toc-content&quot;&gt;
&lt;h3 class=&quot;menu-label&quot;&gt;ToC&lt;/h3&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;結論&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#on-delete-%E3%81%A8-if-%E3%81%A7%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%90%8D%E6%8C%87%E5%AE%9A&quot;&gt;on: delete と if でブランチ名指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%AB-push-%E3%81%97%E3%81%A6%E5%88%9D%E3%82%81%E3%81%A6-ondelete-%E3%81%AF%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B&quot;&gt;デフォルトブランチに push して初めて on.delete は利用できる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%BE%E3%81%A8%E3%82%81&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;GitHub Actions で特定ブランチが削除された場合にトリガーし実行する設定を試してみたのでまとめます。&lt;/p&gt;
&lt;p&gt;以下設定サンプルです。&lt;br&gt;&lt;a href=&quot;https://github.com/kenzo0107/tutorial-delete-event-on-github-actions/blob/develop/.github/workflows/delete.yml&quot;&gt;https://github.com/kenzo0107/tutorial-delete-event-on-github-actions/blob/develop/.github/workflows/delete.yml&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
